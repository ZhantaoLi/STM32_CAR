
Balance_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  080069a8  080069a8  000169a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007218  08007218  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08007218  08007218  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007218  08007218  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007218  08007218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200000a4  080072c4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080072c4  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010be3  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0b  00000000  00000000  00030cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00033ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00034c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040f0  00000000  00000000  00035ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016442  00000000  00000000  00039d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1a9  00000000  00000000  000501d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000de3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a4 	.word	0x200000a4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800698c 	.word	0x0800698c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a8 	.word	0x200000a8
 800014c:	0800698c 	.word	0x0800698c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <Get_digits>:
//作    者：蒋欣桐
//日    期：2022/12/05
//版    本：0.0
//==================================================================
int Get_digits(float Input, float Digits)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    float Temp;
    float Ten=10;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <Get_digits+0x74>)
 8001108:	617b      	str	r3, [r7, #20]
    uint32_t Out=0;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]

    Temp=pow(Ten,Digits);
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff f982 	bl	8000418 <__aeabi_f2d>
 8001114:	4604      	mov	r4, r0
 8001116:	460d      	mov	r5, r1
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f7ff f97d 	bl	8000418 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f004 fd4f 	bl	8005bc8 <pow>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fc79 	bl	8000a28 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	60fb      	str	r3, [r7, #12]
    Temp=Input*Temp;
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff fdd1 	bl	8000ce4 <__aeabi_fmul>
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]
    Out=(int)Temp/1%10;
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff ff92 	bl	8001070 <__aeabi_f2iz>
 800114c:	4601      	mov	r1, r0
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <Get_digits+0x78>)
 8001150:	fb83 2301 	smull	r2, r3, r3, r1
 8001154:	109a      	asrs	r2, r3, #2
 8001156:	17cb      	asrs	r3, r1, #31
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	1aca      	subs	r2, r1, r3
 8001164:	613a      	str	r2, [r7, #16]

    return Out;
 8001166:	693b      	ldr	r3, [r7, #16]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bdb0      	pop	{r4, r5, r7, pc}
 8001170:	41200000 	.word	0x41200000
 8001174:	66666667 	.word	0x66666667

08001178 <PID_Init>:
//作    者：蒋欣桐
//日    期：2022/1/12
//版    本：0.0
//==================================================================
void PID_Init(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	pid.Sv=0;	//用户设定角度
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <PID_Init+0x38>)
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
	pid.T=2;	//PID计算周期(ms)
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <PID_Init+0x38>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118a:	60da      	str	r2, [r3, #12]
	pid.Kp=32.8*0.6;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <PID_Init+0x38>)
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <PID_Init+0x3c>)
 8001190:	609a      	str	r2, [r3, #8]
	pid.Ki=0;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <PID_Init+0x38>)
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
	pid.Kd=130.6*0.6;//98.8*0.6;
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <PID_Init+0x38>)
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <PID_Init+0x40>)
 800119e:	615a      	str	r2, [r3, #20]
	pid.PWM_T=100;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <PID_Init+0x38>)
 80011a2:	2264      	movs	r2, #100	; 0x64
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200000dc 	.word	0x200000dc
 80011b4:	419d70a4 	.word	0x419d70a4
 80011b8:	429cb852 	.word	0x429cb852

080011bc <PID_Cal>:
//作    者：蒋欣桐
//日    期：2022/1/12
//版    本：0.0
//==================================================================
float PID_Cal(void)	//PID计算
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	if(pid.PID_1ms>=pid.T)	//判断是否到达计算周期
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <PID_Cal+0x100>)
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd35 	bl	8000c34 <__aeabi_ui2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <PID_Cal+0x100>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4610      	mov	r0, r2
 80011d4:	f7ff ff38 	bl	8001048 <__aeabi_fcmpge>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d06a      	beq.n	80012b4 <PID_Cal+0xf8>
	{
		pid.Ek=pid.Sv-pid.Pv;	//得到当前的偏差
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <PID_Cal+0x100>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a36      	ldr	r2, [pc, #216]	; (80012bc <PID_Cal+0x100>)
 80011e4:	6852      	ldr	r2, [r2, #4]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fc71 	bl	8000ad0 <__aeabi_fsub>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <PID_Cal+0x100>)
 80011f4:	619a      	str	r2, [r3, #24]
		Pout=pid.Kp*pid.Ek;	//比例输出
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <PID_Cal+0x100>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <PID_Cal+0x100>)
 80011fc:	6992      	ldr	r2, [r2, #24]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fd6f 	bl	8000ce4 <__aeabi_fmul>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <PID_Cal+0x104>)
 800120c:	601a      	str	r2, [r3, #0]

		pid.Sek+=pid.Ek;	//历史偏差总和
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <PID_Cal+0x100>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <PID_Cal+0x100>)
 8001214:	6992      	ldr	r2, [r2, #24]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc5b 	bl	8000ad4 <__addsf3>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <PID_Cal+0x100>)
 8001224:	621a      	str	r2, [r3, #32]
		Iout=pid.Ki*pid.Sek;	//积分项输出
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <PID_Cal+0x100>)
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <PID_Cal+0x100>)
 800122c:	6a12      	ldr	r2, [r2, #32]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd57 	bl	8000ce4 <__aeabi_fmul>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <PID_Cal+0x108>)
 800123c:	601a      	str	r2, [r3, #0]

		Dert_Ek=pid.Ek-pid.Ek_1;	//最近两次偏差之差
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <PID_Cal+0x100>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <PID_Cal+0x100>)
 8001244:	69d2      	ldr	r2, [r2, #28]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc41 	bl	8000ad0 <__aeabi_fsub>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <PID_Cal+0x10c>)
 8001254:	601a      	str	r2, [r3, #0]
		Dout=pid.Kd*Dert_Ek;	//微分项输出
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <PID_Cal+0x100>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <PID_Cal+0x10c>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd3f 	bl	8000ce4 <__aeabi_fmul>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <PID_Cal+0x110>)
 800126c:	601a      	str	r2, [r3, #0]

		OUT_Temp=Pout+Iout+Dout+pid.OUT0;	//本次计算结果
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <PID_Cal+0x104>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <PID_Cal+0x108>)
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fc2b 	bl	8000ad4 <__addsf3>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <PID_Cal+0x110>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f7ff fc23 	bl	8000ad4 <__addsf3>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <PID_Cal+0x100>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f7ff fc1b 	bl	8000ad4 <__addsf3>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <PID_Cal+0x114>)
 80012a4:	601a      	str	r2, [r3, #0]

		pid.Ek_1=pid.Ek;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <PID_Cal+0x100>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <PID_Cal+0x100>)
 80012ac:	61d3      	str	r3, [r2, #28]

		pid.PID_1ms=0;	//计数清零
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <PID_Cal+0x100>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return OUT_Temp;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <PID_Cal+0x114>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000dc 	.word	0x200000dc
 80012c0:	200000c8 	.word	0x200000c8
 80012c4:	200000c4 	.word	0x200000c4
 80012c8:	200000c0 	.word	0x200000c0
 80012cc:	200000cc 	.word	0x200000cc
 80012d0:	200000d0 	.word	0x200000d0

080012d4 <PID_Control>:
//作    者：蒋欣桐
//日    期：2022/1/12
//版    本：0.0
//==================================================================
void PID_Control(void)
{
 80012d4:	b598      	push	{r3, r4, r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	PID_PWM=PID_Cal()+Speed_Ring_PID_Cal();
 80012d8:	f7ff ff70 	bl	80011bc <PID_Cal>
 80012dc:	4604      	mov	r4, r0
 80012de:	f000 f887 	bl	80013f0 <Speed_Ring_PID_Cal>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fbf4 	bl	8000ad4 <__addsf3>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <PID_Control+0xbc>)
 80012f2:	601a      	str	r2, [r3, #0]
	PID_PWM_Temp=PID_PWM;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <PID_Control+0xbc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a26      	ldr	r2, [pc, #152]	; (8001394 <PID_Control+0xc0>)
 80012fa:	6013      	str	r3, [r2, #0]
	if(PID_PWM<0)
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <PID_Control+0xbc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 0100 	mov.w	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe8b 	bl	8001020 <__aeabi_fcmplt>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <PID_Control+0x48>
		PID_PWM=-PID_PWM;
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <PID_Control+0xbc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <PID_Control+0xbc>)
 800131a:	6013      	str	r3, [r2, #0]

	Right_Motor_PWM_Set(PID_PWM/10);
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <PID_Control+0xbc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	491d      	ldr	r1, [pc, #116]	; (8001398 <PID_Control+0xc4>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fd92 	bl	8000e4c <__aeabi_fdiv>
 8001328:	4603      	mov	r3, r0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fec6 	bl	80010bc <__aeabi_f2uiz>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd08 	bl	8001d48 <Right_Motor_PWM_Set>
	Light_Motor_PWM_Set(PID_PWM/10);
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <PID_Control+0xbc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4916      	ldr	r1, [pc, #88]	; (8001398 <PID_Control+0xc4>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fd84 	bl	8000e4c <__aeabi_fdiv>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff feb8 	bl	80010bc <__aeabi_f2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fd2e 	bl	8001db0 <Light_Motor_PWM_Set>
	if(PID_PWM_Temp>=20)
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <PID_Control+0xc0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4910      	ldr	r1, [pc, #64]	; (800139c <PID_Control+0xc8>)
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe74 	bl	8001048 <__aeabi_fcmpge>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <PID_Control+0x9c>
	{
		Right_Motor_Reverse();
 8001366:	f000 fcdd 	bl	8001d24 <Right_Motor_Reverse>
		Light_Motor_Reverse();
 800136a:	f000 fd0f 	bl	8001d8c <Light_Motor_Reverse>
	else if(PID_PWM_Temp<=-20)
	{
		Right_Motor_Foward();
		Light_Motor_Foward();
	}
}
 800136e:	e00d      	b.n	800138c <PID_Control+0xb8>
	else if(PID_PWM_Temp<=-20)
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <PID_Control+0xc0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	490a      	ldr	r1, [pc, #40]	; (80013a0 <PID_Control+0xcc>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fe5c 	bl	8001034 <__aeabi_fcmple>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <PID_Control+0xb0>
}
 8001382:	e003      	b.n	800138c <PID_Control+0xb8>
		Right_Motor_Foward();
 8001384:	f000 fcbc 	bl	8001d00 <Right_Motor_Foward>
		Light_Motor_Foward();
 8001388:	f000 fcee 	bl	8001d68 <Light_Motor_Foward>
}
 800138c:	bf00      	nop
 800138e:	bd98      	pop	{r3, r4, r7, pc}
 8001390:	200000d4 	.word	0x200000d4
 8001394:	200000d8 	.word	0x200000d8
 8001398:	41200000 	.word	0x41200000
 800139c:	41a00000 	.word	0x41a00000
 80013a0:	c1a00000 	.word	0xc1a00000

080013a4 <Speed_Ring_PID_Init>:
//作    者：蒋欣桐
//日    期：2022/1/28
//版    本：0.0
//==================================================================
void Speed_Ring_PID_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	sp_pid.Speed_Ring_Sv=0;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
	sp_pid.Speed_Ring_T=2;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b6:	615a      	str	r2, [r3, #20]
	sp_pid.Speed_Ring_Kp=5.26;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <Speed_Ring_PID_Init+0x44>)
 80013bc:	609a      	str	r2, [r3, #8]
	sp_pid.Speed_Ring_Ki=sp_pid.Speed_Ring_Kp/200;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	490a      	ldr	r1, [pc, #40]	; (80013ec <Speed_Ring_PID_Init+0x48>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd41 	bl	8000e4c <__aeabi_fdiv>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013d0:	60da      	str	r2, [r3, #12]
	sp_pid.Speed_Ring_Kd=0;
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
	sp_pid.Speed_Ring_PWM_T=100;
 80013da:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <Speed_Ring_PID_Init+0x40>)
 80013dc:	2264      	movs	r2, #100	; 0x64
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000124 	.word	0x20000124
 80013e8:	40a851ec 	.word	0x40a851ec
 80013ec:	43480000 	.word	0x43480000

080013f0 <Speed_Ring_PID_Cal>:
//作    者：蒋欣桐
//日    期：2022/1/28
//版    本：0.0
//==================================================================
float Speed_Ring_PID_Cal(void)
{
 80013f0:	b598      	push	{r3, r4, r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	if(sp_pid.Speed_Ring_1ms>sp_pid.Speed_Ring_T)
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc1b 	bl	8000c34 <__aeabi_ui2f>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fe28 	bl	800105c <__aeabi_fcmpgt>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d078      	beq.n	8001504 <Speed_Ring_PID_Cal+0x114>
	{
		sp_pid.Speed_Ring_Pv=Get_Encoder_Speed_L()+Get_Encoder_Speed_R();
 8001412:	f000 f901 	bl	8001618 <Get_Encoder_Speed_L>
 8001416:	4604      	mov	r4, r0
 8001418:	f000 f8be 	bl	8001598 <Get_Encoder_Speed_R>
 800141c:	4603      	mov	r3, r0
 800141e:	4619      	mov	r1, r3
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff fb57 	bl	8000ad4 <__addsf3>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 800142c:	605a      	str	r2, [r3, #4]

		sp_pid.Speed_Ring_Ek=sp_pid.Speed_Ring_Sv-sp_pid.Speed_Ring_Pv;
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a36      	ldr	r2, [pc, #216]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001434:	6852      	ldr	r2, [r2, #4]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fb49 	bl	8000ad0 <__aeabi_fsub>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001444:	619a      	str	r2, [r3, #24]
		Speed_Ring_Pout=sp_pid.Speed_Ring_Kp*sp_pid.Speed_Ring_Ek;
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 800144c:	6992      	ldr	r2, [r2, #24]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fc47 	bl	8000ce4 <__aeabi_fmul>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <Speed_Ring_PID_Cal+0x120>)
 800145c:	601a      	str	r2, [r3, #0]

		sp_pid.Speed_Ring_Sek+=sp_pid.Speed_Ring_Ek;
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001464:	6992      	ldr	r2, [r2, #24]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb33 	bl	8000ad4 <__addsf3>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001474:	621a      	str	r2, [r3, #32]
		Speed_Ring_Iout=sp_pid.Speed_Ring_Ki*sp_pid.Speed_Ring_Sek;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 800147c:	6a12      	ldr	r2, [r2, #32]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fc2f 	bl	8000ce4 <__aeabi_fmul>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <Speed_Ring_PID_Cal+0x124>)
 800148c:	601a      	str	r2, [r3, #0]

		Speed_Ring_DertEk=sp_pid.Speed_Ring_Ek-sp_pid.Speed_Ring_Ek_1;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001494:	69d2      	ldr	r2, [r2, #28]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fb19 	bl	8000ad0 <__aeabi_fsub>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <Speed_Ring_PID_Cal+0x128>)
 80014a4:	601a      	str	r2, [r3, #0]
		Speed_Ring_Dout=Speed_Ring_DertEk*sp_pid.Speed_Ring_Kd;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <Speed_Ring_PID_Cal+0x128>)
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fc17 	bl	8000ce4 <__aeabi_fmul>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <Speed_Ring_PID_Cal+0x12c>)
 80014bc:	601a      	str	r2, [r3, #0]

		Speed_Ring_OUT_Temp=Speed_Ring_Pout+Speed_Ring_Iout+Speed_Ring_Dout+sp_pid.Speed_Ring_OUT0;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <Speed_Ring_PID_Cal+0x120>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <Speed_Ring_PID_Cal+0x124>)
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb03 	bl	8000ad4 <__addsf3>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <Speed_Ring_PID_Cal+0x12c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f7ff fafb 	bl	8000ad4 <__addsf3>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4610      	mov	r0, r2
 80014ea:	f7ff faf3 	bl	8000ad4 <__addsf3>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <Speed_Ring_PID_Cal+0x130>)
 80014f4:	601a      	str	r2, [r3, #0]

		sp_pid.Speed_Ring_Ek_1=sp_pid.Speed_Ring_Ek;
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 80014fc:	61d3      	str	r3, [r2, #28]
		sp_pid.Speed_Ring_1ms=0;
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <Speed_Ring_PID_Cal+0x11c>)
 8001500:	2200      	movs	r2, #0
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return Speed_Ring_OUT_Temp;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Speed_Ring_PID_Cal+0x130>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd98      	pop	{r3, r4, r7, pc}
 800150c:	20000124 	.word	0x20000124
 8001510:	20000114 	.word	0x20000114
 8001514:	20000118 	.word	0x20000118
 8001518:	20000120 	.word	0x20000120
 800151c:	2000011c 	.word	0x2000011c
 8001520:	20000110 	.word	0x20000110

08001524 <Get_Encoder_Cot_R>:
//作    者：蒋欣桐
//日    期：2022/12/05
//版    本：0.0
//==================================================================
short Get_Encoder_Cot_R(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	Encoder_Cot_R= (short)__HAL_TIM_GET_COUNTER(&htim4);
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <Get_Encoder_Cot_R+0x38>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <Get_Encoder_Cot_R+0x3c>)
 8001532:	801a      	strh	r2, [r3, #0]


	__HAL_TIM_SET_COUNTER(&htim4,0);	//计数清零
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <Get_Encoder_Cot_R+0x38>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

	Encoder_Cot_R=-1*Encoder_Cot_R;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <Get_Encoder_Cot_R+0x3c>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b29b      	uxth	r3, r3
 8001544:	425b      	negs	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <Get_Encoder_Cot_R+0x3c>)
 800154c:	801a      	strh	r2, [r3, #0]

	return Encoder_Cot_R;
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <Get_Encoder_Cot_R+0x3c>)
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	200002ac 	.word	0x200002ac
 8001560:	20000158 	.word	0x20000158

08001564 <Get_Encoder_Cot_L>:
//作    者：蒋欣桐
//日    期：2022/12/05
//版    本：0.0
//==================================================================
short Get_Encoder_Cot_L(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	Encoder_Cot_L= (short)__HAL_TIM_GET_COUNTER(&htim3);
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <Get_Encoder_Cot_L+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <Get_Encoder_Cot_L+0x2c>)
 8001572:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim3,0);	//计数清零
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <Get_Encoder_Cot_L+0x28>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24

	return Encoder_Cot_L;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <Get_Encoder_Cot_L+0x2c>)
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000264 	.word	0x20000264
 8001590:	2000015a 	.word	0x2000015a
 8001594:	00000000 	.word	0x00000000

08001598 <Get_Encoder_Speed_R>:
//作    者：蒋欣桐
//日    期：2022/12/05
//版    本：0.2
//==================================================================
float Get_Encoder_Speed_R(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	if(R_Encoder_Speed_Judge==1)		//每0.2s 变量R_Encoder_Speed_Judge置为1进行计算。
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <Get_Encoder_Speed_R+0x78>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d120      	bne.n	80015e6 <Get_Encoder_Speed_R+0x4e>
	{
		Encoder_Speed_R = (0.013 * Get_Encoder_Cot_R()) / 0.02;
 80015a4:	f7ff ffbe 	bl	8001524 <Get_Encoder_Cot_R>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff22 	bl	80003f4 <__aeabi_i2d>
 80015b0:	a313      	add	r3, pc, #76	; (adr r3, 8001600 <Get_Encoder_Speed_R+0x68>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe ff87 	bl	80004c8 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	a311      	add	r3, pc, #68	; (adr r3, 8001608 <Get_Encoder_Speed_R+0x70>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f8a8 	bl	800071c <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fa28 	bl	8000a28 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <Get_Encoder_Speed_R+0x7c>)
 80015dc:	6013      	str	r3, [r2, #0]
		R_Encoder_Speed_Judge=0;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <Get_Encoder_Speed_R+0x78>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e007      	b.n	80015f6 <Get_Encoder_Speed_R+0x5e>
	}
	else if(R_Encoder_Speed_Judge==0)
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <Get_Encoder_Speed_R+0x78>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <Get_Encoder_Speed_R+0x5e>
		Encoder_Speed_R=Encoder_Speed_R;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <Get_Encoder_Speed_R+0x7c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <Get_Encoder_Speed_R+0x7c>)
 80015f4:	6013      	str	r3, [r2, #0]

	return Encoder_Speed_R;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <Get_Encoder_Speed_R+0x7c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	76c8b439 	.word	0x76c8b439
 8001604:	3f8a9fbe 	.word	0x3f8a9fbe
 8001608:	47ae147b 	.word	0x47ae147b
 800160c:	3f947ae1 	.word	0x3f947ae1
 8001610:	200001e0 	.word	0x200001e0
 8001614:	2000015c 	.word	0x2000015c

08001618 <Get_Encoder_Speed_L>:
//作    者：蒋欣桐
//日    期：2022/12/06
//版    本：0.0
//==================================================================
float Get_Encoder_Speed_L(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	if(L_Encoder_Speed_Judge==1)
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <Get_Encoder_Speed_L+0x78>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d120      	bne.n	8001666 <Get_Encoder_Speed_L+0x4e>
	{
		Encoder_Speed_L = (0.013 * Get_Encoder_Cot_L()) / 0.02;
 8001624:	f7ff ff9e 	bl	8001564 <Get_Encoder_Cot_L>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe fee2 	bl	80003f4 <__aeabi_i2d>
 8001630:	a313      	add	r3, pc, #76	; (adr r3, 8001680 <Get_Encoder_Speed_L+0x68>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ff47 	bl	80004c8 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	a311      	add	r3, pc, #68	; (adr r3, 8001688 <Get_Encoder_Speed_L+0x70>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f868 	bl	800071c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff f9e8 	bl	8000a28 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <Get_Encoder_Speed_L+0x7c>)
 800165c:	6013      	str	r3, [r2, #0]
		L_Encoder_Speed_Judge=0;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <Get_Encoder_Speed_L+0x78>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <Get_Encoder_Speed_L+0x5e>
	}
	else if(L_Encoder_Speed_Judge==0)
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <Get_Encoder_Speed_L+0x78>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <Get_Encoder_Speed_L+0x5e>
		Encoder_Speed_L=Encoder_Speed_L;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <Get_Encoder_Speed_L+0x7c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <Get_Encoder_Speed_L+0x7c>)
 8001674:	6013      	str	r3, [r2, #0]

	return Encoder_Speed_L;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <Get_Encoder_Speed_L+0x7c>)
 8001678:	681b      	ldr	r3, [r3, #0]
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	76c8b439 	.word	0x76c8b439
 8001684:	3f8a9fbe 	.word	0x3f8a9fbe
 8001688:	47ae147b 	.word	0x47ae147b
 800168c:	3f947ae1 	.word	0x3f947ae1
 8001690:	200001e1 	.word	0x200001e1
 8001694:	20000160 	.word	0x20000160

08001698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <MX_GPIO_Init+0x148>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <MX_GPIO_Init+0x148>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	4834      	ldr	r0, [pc, #208]	; (80017e4 <MX_GPIO_Init+0x14c>)
 8001714:	f001 ffad 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RMO1_Pin|RMO2_Pin|OLED_SCL_Pin|OLED_SDA_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800171e:	4832      	ldr	r0, [pc, #200]	; (80017e8 <MX_GPIO_Init+0x150>)
 8001720:	f001 ffa7 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LMO1_Pin|LMO2_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800172a:	4830      	ldr	r0, [pc, #192]	; (80017ec <MX_GPIO_Init+0x154>)
 800172c:	f001 ffa1 	bl	8003672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2302      	movs	r3, #2
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	4826      	ldr	r0, [pc, #152]	; (80017e4 <MX_GPIO_Init+0x14c>)
 800174a:	f001 fdf7 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 800174e:	2330      	movs	r3, #48	; 0x30
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4619      	mov	r1, r3
 8001760:	4822      	ldr	r0, [pc, #136]	; (80017ec <MX_GPIO_Init+0x154>)
 8001762:	f001 fdeb 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RMO1_Pin|RMO2_Pin;
 8001766:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2302      	movs	r3, #2
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4619      	mov	r1, r3
 800177e:	481a      	ldr	r0, [pc, #104]	; (80017e8 <MX_GPIO_Init+0x150>)
 8001780:	f001 fddc 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001784:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2302      	movs	r3, #2
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	4812      	ldr	r0, [pc, #72]	; (80017e8 <MX_GPIO_Init+0x150>)
 800179e:	f001 fdcd 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LMO1_Pin|LMO2_Pin;
 80017a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <MX_GPIO_Init+0x154>)
 80017bc:	f001 fdbe 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key_Pin;
 80017c0:	2310      	movs	r3, #16
 80017c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(key_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0x150>)
 80017d4:	f001 fdb2 	bl	800333c <HAL_GPIO_Init>

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40010800 	.word	0x40010800

080017f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C1_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_I2C1_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C1_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_I2C1_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_I2C1_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C1_Init+0x50>)
 800182e:	f001 ff51 	bl	80036d4 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 fa5d 	bl	8001cf6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000164 	.word	0x20000164
 8001844:	40005400 	.word	0x40005400
 8001848:	000186a0 	.word	0x000186a0

0800184c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_I2C_MspInit+0x90>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d132      	bne.n	80018d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6050_SCL_Pin|MPU6050_SDA_Pin;
 8001884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188a:	2312      	movs	r3, #18
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4812      	ldr	r0, [pc, #72]	; (80018e4 <HAL_I2C_MspInit+0x98>)
 800189a:	f001 fd4f 	bl	800333c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_I2C_MspInit+0x9c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_I2C_MspInit+0x9c>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40005400 	.word	0x40005400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40010000 	.word	0x40010000

080018ec <Jy61_Cal>:
//作    者：蒋欣桐
//日    期：2022/12/24
//版    本：1.0
//==================================================================
void Jy61_Cal(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	Jy61_Angle_Temp=Jy61_Angle_Data[3]<<8|Jy61_Angle_Data[2];	//x轴hex数据高八位低八位计算
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <Jy61_Cal+0x70>)
 80018f2:	78db      	ldrb	r3, [r3, #3]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	4a19      	ldr	r2, [pc, #100]	; (800195c <Jy61_Cal+0x70>)
 80018f8:	7892      	ldrb	r2, [r2, #2]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f99d 	bl	8000c3c <__aeabi_i2f>
 8001902:	4603      	mov	r3, r0
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <Jy61_Cal+0x74>)
 8001906:	6013      	str	r3, [r2, #0]
	Jy61_X_Angle=Jy61_Angle_Temp/32768*180;		//x轴翻滚角计算
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <Jy61_Cal+0x74>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa9b 	bl	8000e4c <__aeabi_fdiv>
 8001916:	4603      	mov	r3, r0
 8001918:	4912      	ldr	r1, [pc, #72]	; (8001964 <Jy61_Cal+0x78>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9e2 	bl	8000ce4 <__aeabi_fmul>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <Jy61_Cal+0x7c>)
 8001926:	601a      	str	r2, [r3, #0]
	if(Jy61_X_Angle>180)
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <Jy61_Cal+0x7c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	490d      	ldr	r1, [pc, #52]	; (8001964 <Jy61_Cal+0x78>)
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb94 	bl	800105c <__aeabi_fcmpgt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <Jy61_Cal+0x62>
		Jy61_X_Angle=Jy61_X_Angle-360;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <Jy61_Cal+0x7c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	490b      	ldr	r1, [pc, #44]	; (800196c <Jy61_Cal+0x80>)
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f8c5 	bl	8000ad0 <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <Jy61_Cal+0x7c>)
 800194c:	601a      	str	r2, [r3, #0]
	pid.Pv=Jy61_X_Angle;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <Jy61_Cal+0x7c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a07      	ldr	r2, [pc, #28]	; (8001970 <Jy61_Cal+0x84>)
 8001954:	6053      	str	r3, [r2, #4]
	//Dec_To_Hex(Jy61_X_Angle);
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001c8 	.word	0x200001c8
 8001960:	200001dc 	.word	0x200001dc
 8001964:	43340000 	.word	0x43340000
 8001968:	200001d8 	.word	0x200001d8
 800196c:	43b40000 	.word	0x43b40000
 8001970:	200000dc 	.word	0x200000dc

08001974 <Jy61_RXData>:
//作    者：蒋欣桐
//日    期：2022/12/24
//版    本：1.0
//==================================================================
void Jy61_RXData(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	Jy61_Data[Rx_Count]=Jy61_Rx;	//将接收到的单个hex数据存储
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <Jy61_RXData+0xa0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <Jy61_RXData+0xa4>)
 800197e:	7811      	ldrb	r1, [r2, #0]
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <Jy61_RXData+0xa8>)
 8001982:	54d1      	strb	r1, [r2, r3]

	if(Jy61_Data[0]==0x55)		//判断是否读取到包头，读取到包头后进入
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <Jy61_RXData+0xa8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b55      	cmp	r3, #85	; 0x55
 800198a:	d139      	bne.n	8001a00 <Jy61_RXData+0x8c>
	{
		Rx_Count++;
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <Jy61_RXData+0xa0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <Jy61_RXData+0xa0>)
 8001994:	6013      	str	r3, [r2, #0]
		if(Rx_Count>=11)	//判断数据包是否打包好
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <Jy61_RXData+0xa0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b0a      	cmp	r3, #10
 800199c:	d937      	bls.n	8001a0e <Jy61_RXData+0x9a>
		{
			Rx_Count=0;		//计数清零
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <Jy61_RXData+0xa0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
			switch(Jy61_Data[1])	//判断接收到的数据内容是什么
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <Jy61_RXData+0xa8>)
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	2b53      	cmp	r3, #83	; 0x53
 80019aa:	d130      	bne.n	8001a0e <Jy61_RXData+0x9a>
			{
				case 0x53:		//接收到翻滚角
				{
					for(Rx_Count=0;Rx_Count<11;Rx_Count++)		//存储到Jy61_Angle_Data中
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <Jy61_RXData+0xa0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00c      	b.n	80019ce <Jy61_RXData+0x5a>
						Jy61_Angle_Data[Rx_Count]=Jy61_Data[Rx_Count];
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <Jy61_RXData+0xa0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <Jy61_RXData+0xa0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4917      	ldr	r1, [pc, #92]	; (8001a1c <Jy61_RXData+0xa8>)
 80019be:	5c89      	ldrb	r1, [r1, r2]
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <Jy61_RXData+0xac>)
 80019c2:	54d1      	strb	r1, [r2, r3]
					for(Rx_Count=0;Rx_Count<11;Rx_Count++)		//存储到Jy61_Angle_Data中
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <Jy61_RXData+0xa0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <Jy61_RXData+0xa0>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <Jy61_RXData+0xa0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b0a      	cmp	r3, #10
 80019d4:	d9ee      	bls.n	80019b4 <Jy61_RXData+0x40>
					Jy61_Cal();		//计算数据
 80019d6:	f7ff ff89 	bl	80018ec <Jy61_Cal>
					for(Rx_Count=0;Rx_Count<11;Rx_Count++)
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <Jy61_RXData+0xa0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e009      	b.n	80019f6 <Jy61_RXData+0x82>
						Jy61_Data[Rx_Count]=0;		//存储空间清零
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <Jy61_RXData+0xa0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <Jy61_RXData+0xa8>)
 80019e8:	2100      	movs	r1, #0
 80019ea:	54d1      	strb	r1, [r2, r3]
					for(Rx_Count=0;Rx_Count<11;Rx_Count++)
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <Jy61_RXData+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <Jy61_RXData+0xa0>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <Jy61_RXData+0xa0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	d9f1      	bls.n	80019e2 <Jy61_RXData+0x6e>
	}
	else if(Jy61_Data[0]!=0x55)		//未接收到包头
	{
		Rx_Count=0;
	}
}
 80019fe:	e006      	b.n	8001a0e <Jy61_RXData+0x9a>
	else if(Jy61_Data[0]!=0x55)		//未接收到包头
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <Jy61_RXData+0xa8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b55      	cmp	r3, #85	; 0x55
 8001a06:	d002      	beq.n	8001a0e <Jy61_RXData+0x9a>
		Rx_Count=0;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <Jy61_RXData+0xa0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200001d4 	.word	0x200001d4
 8001a18:	200001b8 	.word	0x200001b8
 8001a1c:	200001bc 	.word	0x200001bc
 8001a20:	200001c8 	.word	0x200001c8
 8001a24:	00000000 	.word	0x00000000

08001a28 <Key_Scan>:
//作    者：蒋欣桐
//日    期：2022/1/29
//版    本：1.0
//==================================================================
void Key_Scan(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	if(Key1==GPIO_PIN_RESET)
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	4836      	ldr	r0, [pc, #216]	; (8001b08 <Key_Scan+0xe0>)
 8001a30:	f001 fe08 	bl	8003644 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d12c      	bne.n	8001a94 <Key_Scan+0x6c>
	{
		HAL_Delay(10);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f001 fa9c 	bl	8002f78 <HAL_Delay>
		if(Key1==GPIO_PIN_RESET)
 8001a40:	2110      	movs	r1, #16
 8001a42:	4831      	ldr	r0, [pc, #196]	; (8001b08 <Key_Scan+0xe0>)
 8001a44:	f001 fdfe 	bl	8003644 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d122      	bne.n	8001a94 <Key_Scan+0x6c>
		{
			while(Key1==GPIO_PIN_RESET);
 8001a4e:	bf00      	nop
 8001a50:	2110      	movs	r1, #16
 8001a52:	482d      	ldr	r0, [pc, #180]	; (8001b08 <Key_Scan+0xe0>)
 8001a54:	f001 fdf6 	bl	8003644 <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f8      	beq.n	8001a50 <Key_Scan+0x28>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a62:	482a      	ldr	r0, [pc, #168]	; (8001b0c <Key_Scan+0xe4>)
 8001a64:	f001 fe1d 	bl	80036a2 <HAL_GPIO_TogglePin>
			sp_pid.Speed_Ring_Kp=sp_pid.Speed_Ring_Kp+0.03;
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <Key_Scan+0xe8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fcd3 	bl	8000418 <__aeabi_f2d>
 8001a72:	a323      	add	r3, pc, #140	; (adr r3, 8001b00 <Key_Scan+0xd8>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fb70 	bl	800015c <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7fe ffd0 	bl	8000a28 <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <Key_Scan+0xe8>)
 8001a8c:	6093      	str	r3, [r2, #8]
			HAL_Delay(10);
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f001 fa72 	bl	8002f78 <HAL_Delay>
		}
	}

	if(Key2==GPIO_PIN_RESET)
 8001a94:	2120      	movs	r1, #32
 8001a96:	481c      	ldr	r0, [pc, #112]	; (8001b08 <Key_Scan+0xe0>)
 8001a98:	f001 fdd4 	bl	8003644 <HAL_GPIO_ReadPin>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12c      	bne.n	8001afc <Key_Scan+0xd4>
	{
		HAL_Delay(10);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f001 fa68 	bl	8002f78 <HAL_Delay>
		if(Key2==GPIO_PIN_RESET)
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	4817      	ldr	r0, [pc, #92]	; (8001b08 <Key_Scan+0xe0>)
 8001aac:	f001 fdca 	bl	8003644 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d122      	bne.n	8001afc <Key_Scan+0xd4>
		{
			while(Key2==GPIO_PIN_RESET);
 8001ab6:	bf00      	nop
 8001ab8:	2120      	movs	r1, #32
 8001aba:	4813      	ldr	r0, [pc, #76]	; (8001b08 <Key_Scan+0xe0>)
 8001abc:	f001 fdc2 	bl	8003644 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f8      	beq.n	8001ab8 <Key_Scan+0x90>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aca:	4810      	ldr	r0, [pc, #64]	; (8001b0c <Key_Scan+0xe4>)
 8001acc:	f001 fde9 	bl	80036a2 <HAL_GPIO_TogglePin>
			sp_pid.Speed_Ring_Kp=sp_pid.Speed_Ring_Kp-0.03;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <Key_Scan+0xe8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fc9f 	bl	8000418 <__aeabi_f2d>
 8001ada:	a309      	add	r3, pc, #36	; (adr r3, 8001b00 <Key_Scan+0xd8>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fb3a 	bl	8000158 <__aeabi_dsub>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7fe ff9c 	bl	8000a28 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <Key_Scan+0xe8>)
 8001af4:	6093      	str	r3, [r2, #8]
			HAL_Delay(10);
 8001af6:	200a      	movs	r0, #10
 8001af8:	f001 fa3e 	bl	8002f78 <HAL_Delay>
		}
	}
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	eb851eb8 	.word	0xeb851eb8
 8001b04:	3f9eb851 	.word	0x3f9eb851
 8001b08:	40010800 	.word	0x40010800
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	20000124 	.word	0x20000124

08001b14 <HAL_TIM_PeriodElapsedCallback>:

uint8_t TX_Angle[]="Angle=";
extern uint8_t Jy61_Rx;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	//定时器执行程序函 ?
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b24:	d11b      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		Tim2_Count_0_001++;	//�?????????????????????????????0.001s�?????????????????????????????要执行的程序
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b2e:	6013      	str	r3, [r2, #0]
		pid.PID_1ms++;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b38:	62d3      	str	r3, [r2, #44]	; 0x2c
		sp_pid.Speed_Ring_1ms++;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b42:	62d3      	str	r3, [r2, #44]	; 0x2c

		if(Tim2_Count_0_001>=20)
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b13      	cmp	r3, #19
 8001b4a:	d908      	bls.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			R_Encoder_Speed_Judge=1;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
			L_Encoder_Speed_Judge=1;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
			Tim2_Count_0_001=0;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	200001e4 	.word	0x200001e4
 8001b6c:	200000dc 	.word	0x200000dc
 8001b70:	20000124 	.word	0x20000124
 8001b74:	200001e0 	.word	0x200001e0
 8001b78:	200001e1 	.word	0x200001e1

08001b7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)		//判断UART2有数据接收到
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_UART_RxCpltCallback+0x28>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_RxCpltCallback+0x16>
	{
		Jy61_RXData();
 8001b8e:	f7ff fef1 	bl	8001974 <Jy61_RXData>
	}
	HAL_UART_Receive_IT(&huart2, &Jy61_Rx, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <HAL_UART_RxCpltCallback+0x2c>)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_UART_RxCpltCallback+0x30>)
 8001b98:	f003 fbd5 	bl	8005346 <HAL_UART_Receive_IT>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40004400 	.word	0x40004400
 8001ba8:	200001b8 	.word	0x200001b8
 8001bac:	20000338 	.word	0x20000338

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb4:	f001 f97e 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb8:	f000 f858 	bl	8001c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bbc:	f7ff fd6c 	bl	8001698 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001bc0:	f000 fe72 	bl	80028a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bc4:	f000 fef0 	bl	80029a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bc8:	f000 ff42 	bl	8002a50 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001bcc:	f001 f864 	bl	8002c98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001bd0:	f7ff fe0e 	bl	80017f0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001bd4:	f001 f88a 	bl	8002cec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	481e      	ldr	r0, [pc, #120]	; (8001c54 <main+0xa4>)
 8001bdc:	f002 fd16 	bl	800460c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001be0:	2104      	movs	r1, #4
 8001be2:	481c      	ldr	r0, [pc, #112]	; (8001c54 <main+0xa4>)
 8001be4:	f002 fd12 	bl	800460c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001be8:	2100      	movs	r1, #0
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <main+0xa8>)
 8001bec:	f002 fd0e 	bl	800460c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4819      	ldr	r0, [pc, #100]	; (8001c58 <main+0xa8>)
 8001bf4:	f002 fd0a 	bl	800460c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001bf8:	4818      	ldr	r0, [pc, #96]	; (8001c5c <main+0xac>)
 8001bfa:	f002 fb19 	bl	8004230 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4816      	ldr	r0, [pc, #88]	; (8001c5c <main+0xac>)
 8001c02:	f002 fbbf 	bl	8004384 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c06:	2104      	movs	r1, #4
 8001c08:	4814      	ldr	r0, [pc, #80]	; (8001c5c <main+0xac>)
 8001c0a:	f002 fbbb 	bl	8004384 <HAL_TIM_PWM_Start>

  OLED_Init();
 8001c0e:	f000 fb6b 	bl	80022e8 <OLED_Init>
  OLED_Display_On();
 8001c12:	f000 f9fb 	bl	800200c <OLED_Display_On>
  OLED_DisplayTurn(1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 f8da 	bl	8001dd0 <OLED_DisplayTurn>
  OLED_Clear();
 8001c1c:	f000 fa06 	bl	800202c <OLED_Clear>

  HAL_UART_Receive_IT(&huart2,&Jy61_Rx,1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	490f      	ldr	r1, [pc, #60]	; (8001c60 <main+0xb0>)
 8001c24:	480f      	ldr	r0, [pc, #60]	; (8001c64 <main+0xb4>)
 8001c26:	f003 fb8e 	bl	8005346 <HAL_UART_Receive_IT>

  PID_Init();
 8001c2a:	f7ff faa5 	bl	8001178 <PID_Init>
  Speed_Ring_PID_Init();
 8001c2e:	f7ff fbb9 	bl	80013a4 <Speed_Ring_PID_Init>

  HAL_Delay(1000);
 8001c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c36:	f001 f99f 	bl	8002f78 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <main+0xb8>)
 8001c42:	f001 fd16 	bl	8003672 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OLED_Show();
 8001c46:	f000 fd93 	bl	8002770 <OLED_Show>
	  PID_Control();
 8001c4a:	f7ff fb43 	bl	80012d4 <PID_Control>
	  Key_Scan();
 8001c4e:	f7ff feeb 	bl	8001a28 <Key_Scan>
	  OLED_Show();
 8001c52:	e7f8      	b.n	8001c46 <main+0x96>
 8001c54:	20000264 	.word	0x20000264
 8001c58:	200002ac 	.word	0x200002ac
 8001c5c:	2000021c 	.word	0x2000021c
 8001c60:	200001b8 	.word	0x200001b8
 8001c64:	20000338 	.word	0x20000338
 8001c68:	40011000 	.word	0x40011000

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b090      	sub	sp, #64	; 0x40
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	2228      	movs	r2, #40	; 0x28
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 ff9c 	bl	8005bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001caa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fe51 	bl	800395c <HAL_RCC_OscConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cc0:	f000 f819 	bl	8001cf6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 f8be 	bl	8003e60 <HAL_RCC_ClockConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cea:	f000 f804 	bl	8001cf6 <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3740      	adds	r7, #64	; 0x40
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfa:	b672      	cpsid	i
}
 8001cfc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <Error_Handler+0x8>

08001d00 <Right_Motor_Foward>:
//作    者：蒋欣桐
//日    期：2022/12/12
//版    本：0.0
//==================================================================
void Right_Motor_Foward(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	Right_Motor_IN1_Hight;
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <Right_Motor_Foward+0x20>)
 8001d0c:	f001 fcb1 	bl	8003672 <HAL_GPIO_WritePin>
	Right_Motor_IN2_Low;
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d16:	4802      	ldr	r0, [pc, #8]	; (8001d20 <Right_Motor_Foward+0x20>)
 8001d18:	f001 fcab 	bl	8003672 <HAL_GPIO_WritePin>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40010c00 	.word	0x40010c00

08001d24 <Right_Motor_Reverse>:
//作    者：蒋欣桐
//日    期：2022/12/12
//版    本：0.0
//==================================================================
void Right_Motor_Reverse(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	Right_Motor_IN1_Low;
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <Right_Motor_Reverse+0x20>)
 8001d30:	f001 fc9f 	bl	8003672 <HAL_GPIO_WritePin>
	Right_Motor_IN2_Hight;
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3a:	4802      	ldr	r0, [pc, #8]	; (8001d44 <Right_Motor_Reverse+0x20>)
 8001d3c:	f001 fc99 	bl	8003672 <HAL_GPIO_WritePin>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40010c00 	.word	0x40010c00

08001d48 <Right_Motor_PWM_Set>:
//作    者：蒋欣桐
//日    期：2022/12/13
//版    本：0.0
//==================================================================
void Right_Motor_PWM_Set(uint32_t Right_Motor_PWM)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Right_Motor_PWM);
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <Right_Motor_PWM_Set+0x1c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000021c 	.word	0x2000021c

08001d68 <Light_Motor_Foward>:
//作    者：蒋欣桐
//日    期：2022/12/13
//版    本：0.0
//==================================================================
void Light_Motor_Foward(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	Light_Motor_IN1_Low;
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <Light_Motor_Foward+0x20>)
 8001d74:	f001 fc7d 	bl	8003672 <HAL_GPIO_WritePin>
	Light_Motor_IN2_Hight;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7e:	4802      	ldr	r0, [pc, #8]	; (8001d88 <Light_Motor_Foward+0x20>)
 8001d80:	f001 fc77 	bl	8003672 <HAL_GPIO_WritePin>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40010800 	.word	0x40010800

08001d8c <Light_Motor_Reverse>:
//作    者：蒋欣桐
//日    期：2022/12/13
//版    本：0.0
//==================================================================
void Light_Motor_Reverse(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	Light_Motor_IN1_Hight;
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <Light_Motor_Reverse+0x20>)
 8001d98:	f001 fc6b 	bl	8003672 <HAL_GPIO_WritePin>
	Light_Motor_IN2_Low;
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <Light_Motor_Reverse+0x20>)
 8001da4:	f001 fc65 	bl	8003672 <HAL_GPIO_WritePin>

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40010800 	.word	0x40010800

08001db0 <Light_Motor_PWM_Set>:
//作    者：蒋欣桐
//日    期：2022/12/13
//版    本：0.0
//==================================================================
void Light_Motor_PWM_Set(uint32_t Light_Motor_PWM)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,Light_Motor_PWM);
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <Light_Motor_PWM_Set+0x1c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000021c 	.word	0x2000021c

08001dd0 <OLED_DisplayTurn>:
		}
}

//屏幕旋转180度
void OLED_DisplayTurn(u8 i)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	if(i==0)
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <OLED_DisplayTurn+0x20>
		{
			OLED_WR_Byte(0xC8,OLED_CMD);//������ʾ
 8001de0:	2100      	movs	r1, #0
 8001de2:	20c8      	movs	r0, #200	; 0xc8
 8001de4:	f000 f8d8 	bl	8001f98 <OLED_WR_Byte>
			OLED_WR_Byte(0xA1,OLED_CMD);
 8001de8:	2100      	movs	r1, #0
 8001dea:	20a1      	movs	r0, #161	; 0xa1
 8001dec:	f000 f8d4 	bl	8001f98 <OLED_WR_Byte>
		}
	if(i==1)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <OLED_DisplayTurn+0x36>
		{
			OLED_WR_Byte(0xC0,OLED_CMD);//��ת��ʾ
 8001df6:	2100      	movs	r1, #0
 8001df8:	20c0      	movs	r0, #192	; 0xc0
 8001dfa:	f000 f8cd 	bl	8001f98 <OLED_WR_Byte>
			OLED_WR_Byte(0xA0,OLED_CMD);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	20a0      	movs	r0, #160	; 0xa0
 8001e02:	f000 f8c9 	bl	8001f98 <OLED_WR_Byte>
		}
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <IICStart>:
**********************************************/
/**********************************************
//IIC Start
**********************************************/
void IICStart()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

	OLED_SCLK_Set();
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <IICStart+0x38>)
 8001e1c:	f001 fc29 	bl	8003672 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <IICStart+0x38>)
 8001e28:	f001 fc23 	bl	8003672 <HAL_GPIO_WritePin>
	OLED_SDIN_Clr();
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <IICStart+0x38>)
 8001e34:	f001 fc1d 	bl	8003672 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <IICStart+0x38>)
 8001e40:	f001 fc17 	bl	8003672 <HAL_GPIO_WritePin>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010c00 	.word	0x40010c00

08001e4c <IICStop>:

/**********************************************
//IIC Stop
**********************************************/
void IICStop()
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
OLED_SCLK_Set() ;
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <IICStop+0x2c>)
 8001e58:	f001 fc0b 	bl	8003672 <HAL_GPIO_WritePin>
//	OLED_SCLK_Clr();
	OLED_SDIN_Clr();
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <IICStop+0x2c>)
 8001e64:	f001 fc05 	bl	8003672 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <IICStop+0x2c>)
 8001e70:	f001 fbff 	bl	8003672 <HAL_GPIO_WritePin>
	
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010c00 	.word	0x40010c00

08001e7c <IIC_WaitAck>:

void IIC_WaitAck()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
			//GPIOB->CRH |= 0x00030000;
			return;
		}
	}
*/
	OLED_SCLK_Set() ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <IIC_WaitAck+0x20>)
 8001e88:	f001 fbf3 	bl	8003672 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e92:	4802      	ldr	r0, [pc, #8]	; (8001e9c <IIC_WaitAck+0x20>)
 8001e94:	f001 fbed 	bl	8003672 <HAL_GPIO_WritePin>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010c00 	.word	0x40010c00

08001ea0 <Write_IIC_Byte>:
/**********************************************
// IIC Write byte
**********************************************/

void Write_IIC_Byte(unsigned char IIC_Byte)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char m,da;
	da=IIC_Byte;
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	73bb      	strb	r3, [r7, #14]
	OLED_SCLK_Clr();
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb4:	481a      	ldr	r0, [pc, #104]	; (8001f20 <Write_IIC_Byte+0x80>)
 8001eb6:	f001 fbdc 	bl	8003672 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)		
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e027      	b.n	8001f10 <Write_IIC_Byte+0x70>
	{
			m=da;
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	737b      	strb	r3, [r7, #13]
		//	OLED_SCLK_Clr();
		m=m&0x80;
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001eca:	737b      	strb	r3, [r7, #13]
		if(m==0x80)
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	d106      	bne.n	8001ee0 <Write_IIC_Byte+0x40>
		{OLED_SDIN_Set();}
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed8:	4811      	ldr	r0, [pc, #68]	; (8001f20 <Write_IIC_Byte+0x80>)
 8001eda:	f001 fbca 	bl	8003672 <HAL_GPIO_WritePin>
 8001ede:	e005      	b.n	8001eec <Write_IIC_Byte+0x4c>
		else OLED_SDIN_Clr();
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee6:	480e      	ldr	r0, [pc, #56]	; (8001f20 <Write_IIC_Byte+0x80>)
 8001ee8:	f001 fbc3 	bl	8003672 <HAL_GPIO_WritePin>
			da=da<<1;
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	73bb      	strb	r3, [r7, #14]
		OLED_SCLK_Set();
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef8:	4809      	ldr	r0, [pc, #36]	; (8001f20 <Write_IIC_Byte+0x80>)
 8001efa:	f001 fbba 	bl	8003672 <HAL_GPIO_WritePin>
		OLED_SCLK_Clr();
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <Write_IIC_Byte+0x80>)
 8001f06:	f001 fbb4 	bl	8003672 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)		
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b07      	cmp	r3, #7
 8001f14:	d9d4      	bls.n	8001ec0 <Write_IIC_Byte+0x20>
		}


}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <Write_IIC_Command>:
/**********************************************
// IIC Write Command
**********************************************/
void Write_IIC_Command(unsigned char IIC_Command)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
   IICStart();
 8001f2e:	f7ff ff6f 	bl	8001e10 <IICStart>
   Write_IIC_Byte(0x78);            //Slave address,SA0=0
 8001f32:	2078      	movs	r0, #120	; 0x78
 8001f34:	f7ff ffb4 	bl	8001ea0 <Write_IIC_Byte>
	IIC_WaitAck();	
 8001f38:	f7ff ffa0 	bl	8001e7c <IIC_WaitAck>
   Write_IIC_Byte(0x00);			//write command
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff ffaf 	bl	8001ea0 <Write_IIC_Byte>
	IIC_WaitAck();	
 8001f42:	f7ff ff9b 	bl	8001e7c <IIC_WaitAck>
   Write_IIC_Byte(IIC_Command); 
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ffa9 	bl	8001ea0 <Write_IIC_Byte>
	IIC_WaitAck();	
 8001f4e:	f7ff ff95 	bl	8001e7c <IIC_WaitAck>
   IICStop();
 8001f52:	f7ff ff7b 	bl	8001e4c <IICStop>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <Write_IIC_Data>:
/**********************************************
// IIC Write Data
**********************************************/
void Write_IIC_Data(unsigned char IIC_Data)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
   IICStart();
 8001f68:	f7ff ff52 	bl	8001e10 <IICStart>
   Write_IIC_Byte(0x78);			//D/C#=0; R/W#=0
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f7ff ff97 	bl	8001ea0 <Write_IIC_Byte>
	IIC_WaitAck();	
 8001f72:	f7ff ff83 	bl	8001e7c <IIC_WaitAck>
   Write_IIC_Byte(0x40);			//write data
 8001f76:	2040      	movs	r0, #64	; 0x40
 8001f78:	f7ff ff92 	bl	8001ea0 <Write_IIC_Byte>
	IIC_WaitAck();	
 8001f7c:	f7ff ff7e 	bl	8001e7c <IIC_WaitAck>
   Write_IIC_Byte(IIC_Data);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff8c 	bl	8001ea0 <Write_IIC_Byte>
	IIC_WaitAck();	
 8001f88:	f7ff ff78 	bl	8001e7c <IIC_WaitAck>
   IICStop();
 8001f8c:	f7ff ff5e 	bl	8001e4c <IICStop>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <OLED_WR_Byte>:
void OLED_WR_Byte(unsigned dat,unsigned cmd)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
	if(cmd)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <OLED_WR_Byte+0x1c>
			{

   Write_IIC_Data(dat);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ffd6 	bl	8001f5e <Write_IIC_Data>
   Write_IIC_Command(dat);
		
	}


}
 8001fb2:	e004      	b.n	8001fbe <OLED_WR_Byte+0x26>
   Write_IIC_Command(dat);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffb3 	bl	8001f24 <Write_IIC_Command>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <OLED_Set_Pos>:
}

//坐标设置

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460a      	mov	r2, r1
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	71bb      	strb	r3, [r7, #6]
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	33b0      	adds	r3, #176	; 0xb0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ffdb 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ffd1 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ffca 	bl	8001f98 <OLED_WR_Byte>
}   	  
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <OLED_Display_On>:
//开启OLED显示
void OLED_Display_On(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC����
 8002010:	2100      	movs	r1, #0
 8002012:	208d      	movs	r0, #141	; 0x8d
 8002014:	f7ff ffc0 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8002018:	2100      	movs	r1, #0
 800201a:	2014      	movs	r0, #20
 800201c:	f7ff ffbc 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 8002020:	2100      	movs	r1, #0
 8002022:	20af      	movs	r0, #175	; 0xaf
 8002024:	f7ff ffb8 	bl	8001f98 <OLED_WR_Byte>
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void)  
{  
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	e01e      	b.n	8002076 <OLED_Clear+0x4a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	33b0      	adds	r3, #176	; 0xb0
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffaa 	bl	8001f98 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002044:	2100      	movs	r1, #0
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff ffa6 	bl	8001f98 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 800204c:	2100      	movs	r1, #0
 800204e:	2010      	movs	r0, #16
 8002050:	f7ff ffa2 	bl	8001f98 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8002054:	2300      	movs	r3, #0
 8002056:	71bb      	strb	r3, [r7, #6]
 8002058:	e006      	b.n	8002068 <OLED_Clear+0x3c>
 800205a:	2101      	movs	r1, #1
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff ff9b 	bl	8001f98 <OLED_WR_Byte>
 8002062:	79bb      	ldrb	r3, [r7, #6]
 8002064:	3301      	adds	r3, #1
 8002066:	71bb      	strb	r3, [r7, #6]
 8002068:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	daf4      	bge.n	800205a <OLED_Clear+0x2e>
	for(i=0;i<8;i++)  
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	3301      	adds	r3, #1
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2b07      	cmp	r3, #7
 800207a:	d9dd      	bls.n	8002038 <OLED_Clear+0xc>
	} //������ʾ
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
{      	
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4623      	mov	r3, r4
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	4603      	mov	r3, r0
 800209c:	71bb      	strb	r3, [r7, #6]
 800209e:	460b      	mov	r3, r1
 80020a0:	717b      	strb	r3, [r7, #5]
 80020a2:	4613      	mov	r3, r2
 80020a4:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 80020a6:	2300      	movs	r3, #0
 80020a8:	73bb      	strb	r3, [r7, #14]
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 80020ae:	797b      	ldrb	r3, [r7, #5]
 80020b0:	3b20      	subs	r3, #32
 80020b2:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da04      	bge.n	80020c6 <OLED_ShowChar+0x3e>
 80020bc:	2300      	movs	r3, #0
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	3302      	adds	r3, #2
 80020c4:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80020c6:	793b      	ldrb	r3, [r7, #4]
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d135      	bne.n	8002138 <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);	
 80020cc:	79ba      	ldrb	r2, [r7, #6]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff77 	bl	8001fc6 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e00c      	b.n	80020f8 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80020de:	7bbb      	ldrb	r3, [r7, #14]
 80020e0:	011a      	lsls	r2, r3, #4
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <OLED_ShowChar+0xf4>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff53 	bl	8001f98 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b07      	cmp	r3, #7
 80020fc:	d9ef      	bls.n	80020de <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	3301      	adds	r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5c 	bl	8001fc6 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e00d      	b.n	8002130 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	011a      	lsls	r2, r3, #4
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	4413      	add	r3, r2
 800211c:	3308      	adds	r3, #8
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <OLED_ShowChar+0xf4>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	2101      	movs	r1, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff37 	bl	8001f98 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	3301      	adds	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b07      	cmp	r3, #7
 8002134:	d9ee      	bls.n	8002114 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8002136:	e01c      	b.n	8002172 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 8002138:	79ba      	ldrb	r2, [r7, #6]
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff41 	bl	8001fc6 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e010      	b.n	800216c <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 800214a:	7bba      	ldrb	r2, [r7, #14]
 800214c:	7bf9      	ldrb	r1, [r7, #15]
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <OLED_ShowChar+0xf8>)
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4403      	add	r3, r0
 800215a:	440b      	add	r3, r1
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff19 	bl	8001f98 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	3301      	adds	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d9eb      	bls.n	800214a <OLED_ShowChar+0xc2>
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop
 800217c:	08006be0 	.word	0x08006be0
 8002180:	080069b8 	.word	0x080069b8

08002184 <oled_pow>:
//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8002194:	2301      	movs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8002198:	e004      	b.n	80021a4 <oled_pow+0x20>
 800219a:	79fa      	ldrb	r2, [r7, #7]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	71ba      	strb	r2, [r7, #6]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f5      	bne.n	800219a <oled_pow+0x16>
	return result;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}				  
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <OLED_ShowNum>:
//len :数字的位数
//size:选择字体 16/12
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);
void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size2)
{         	
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	603a      	str	r2, [r7, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	460b      	mov	r3, r1
 80021cc:	71bb      	strb	r3, [r7, #6]
 80021ce:	4613      	mov	r3, r2
 80021d0:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 80021d2:	2300      	movs	r3, #0
 80021d4:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	e049      	b.n	8002270 <OLED_ShowNum+0xb4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80021dc:	797a      	ldrb	r2, [r7, #5]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	200a      	movs	r0, #10
 80021ec:	f7ff ffca 	bl	8002184 <oled_pow>
 80021f0:	4602      	mov	r2, r0
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <OLED_ShowNum+0xc8>)
 80021fa:	fba3 2301 	umull	r2, r3, r3, r1
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	1aca      	subs	r2, r1, r3
 800220a:	4613      	mov	r3, r2
 800220c:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d119      	bne.n	8002248 <OLED_ShowNum+0x8c>
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	797b      	ldrb	r3, [r7, #5]
 8002218:	3b01      	subs	r3, #1
 800221a:	429a      	cmp	r2, r3
 800221c:	da14      	bge.n	8002248 <OLED_ShowNum+0x8c>
		{
			if(temp==0)
 800221e:	7b7b      	ldrb	r3, [r7, #13]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 8002224:	7e3b      	ldrb	r3, [r7, #24]
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	b2da      	uxtb	r2, r3
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4413      	add	r3, r2
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	7e3b      	ldrb	r3, [r7, #24]
 800223a:	79b9      	ldrb	r1, [r7, #6]
 800223c:	2220      	movs	r2, #32
 800223e:	f7ff ff23 	bl	8002088 <OLED_ShowChar>
				continue;
 8002242:	e012      	b.n	800226a <OLED_ShowNum+0xae>
			}else enshow=1; 
 8002244:	2301      	movs	r3, #1
 8002246:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 8002248:	7e3b      	ldrb	r3, [r7, #24]
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	b2da      	uxtb	r2, r3
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4413      	add	r3, r2
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	7b7b      	ldrb	r3, [r7, #13]
 800225e:	3330      	adds	r3, #48	; 0x30
 8002260:	b2da      	uxtb	r2, r3
 8002262:	7e3b      	ldrb	r3, [r7, #24]
 8002264:	79b9      	ldrb	r1, [r7, #6]
 8002266:	f7ff ff0f 	bl	8002088 <OLED_ShowChar>
	for(t=0;t<len;t++)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	3301      	adds	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	797b      	ldrb	r3, [r7, #5]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3b1      	bcc.n	80021dc <OLED_ShowNum+0x20>
	}
} 
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	cccccccd 	.word	0xcccccccd

08002288 <OLED_ShowString>:
//  x: uint8_t 起点列坐标
//  y : uint8_t 起点行坐标
//  chr : uint8_t *字符串指针
//   size:选择字体 16/12
void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	603a      	str	r2, [r7, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	460b      	mov	r3, r1
 8002298:	71bb      	strb	r3, [r7, #6]
 800229a:	4613      	mov	r3, r2
 800229c:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80022a2:	e016      	b.n	80022d2 <OLED_ShowString+0x4a>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	797b      	ldrb	r3, [r7, #5]
 80022ae:	79b9      	ldrb	r1, [r7, #6]
 80022b0:	79f8      	ldrb	r0, [r7, #7]
 80022b2:	f7ff fee9 	bl	8002088 <OLED_ShowChar>
			x+=8;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	3308      	adds	r3, #8
 80022ba:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b78      	cmp	r3, #120	; 0x78
 80022c0:	d904      	bls.n	80022cc <OLED_ShowString+0x44>
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	3302      	adds	r3, #2
 80022ca:	71bb      	strb	r3, [r7, #6]
			j++;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	3301      	adds	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e2      	bne.n	80022a4 <OLED_ShowString+0x1c>
	}
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <OLED_Init>:
	}
} 

//初始化SSD1306
void OLED_Init(void)
{ 	
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0


	//delay_ms(200);


OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 80022ec:	2100      	movs	r1, #0
 80022ee:	20ae      	movs	r0, #174	; 0xae
 80022f0:	f7ff fe52 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 80022f4:	2100      	movs	r1, #0
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff fe4e 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 80022fc:	2100      	movs	r1, #0
 80022fe:	2010      	movs	r0, #16
 8002300:	f7ff fe4a 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 8002304:	2100      	movs	r1, #0
 8002306:	2040      	movs	r0, #64	; 0x40
 8002308:	f7ff fe46 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 800230c:	2100      	movs	r1, #0
 800230e:	20b0      	movs	r0, #176	; 0xb0
 8002310:	f7ff fe42 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8002314:	2100      	movs	r1, #0
 8002316:	2081      	movs	r0, #129	; 0x81
 8002318:	f7ff fe3e 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 800231c:	2100      	movs	r1, #0
 800231e:	20ff      	movs	r0, #255	; 0xff
 8002320:	f7ff fe3a 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 8002324:	2100      	movs	r1, #0
 8002326:	20a1      	movs	r0, #161	; 0xa1
 8002328:	f7ff fe36 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 800232c:	2100      	movs	r1, #0
 800232e:	20a6      	movs	r0, #166	; 0xa6
 8002330:	f7ff fe32 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8002334:	2100      	movs	r1, #0
 8002336:	20a8      	movs	r0, #168	; 0xa8
 8002338:	f7ff fe2e 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 800233c:	2100      	movs	r1, #0
 800233e:	203f      	movs	r0, #63	; 0x3f
 8002340:	f7ff fe2a 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 8002344:	2100      	movs	r1, #0
 8002346:	20c8      	movs	r0, #200	; 0xc8
 8002348:	f7ff fe26 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 800234c:	2100      	movs	r1, #0
 800234e:	20d3      	movs	r0, #211	; 0xd3
 8002350:	f7ff fe22 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 8002354:	2100      	movs	r1, #0
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fe1e 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 800235c:	2100      	movs	r1, #0
 800235e:	20d5      	movs	r0, #213	; 0xd5
 8002360:	f7ff fe1a 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 8002364:	2100      	movs	r1, #0
 8002366:	2080      	movs	r0, #128	; 0x80
 8002368:	f7ff fe16 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 800236c:	2100      	movs	r1, #0
 800236e:	20d8      	movs	r0, #216	; 0xd8
 8002370:	f7ff fe12 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 8002374:	2100      	movs	r1, #0
 8002376:	2005      	movs	r0, #5
 8002378:	f7ff fe0e 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 800237c:	2100      	movs	r1, #0
 800237e:	20d9      	movs	r0, #217	; 0xd9
 8002380:	f7ff fe0a 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8002384:	2100      	movs	r1, #0
 8002386:	20f1      	movs	r0, #241	; 0xf1
 8002388:	f7ff fe06 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 800238c:	2100      	movs	r1, #0
 800238e:	20da      	movs	r0, #218	; 0xda
 8002390:	f7ff fe02 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8002394:	2100      	movs	r1, #0
 8002396:	2012      	movs	r0, #18
 8002398:	f7ff fdfe 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 800239c:	2100      	movs	r1, #0
 800239e:	20db      	movs	r0, #219	; 0xdb
 80023a0:	f7ff fdfa 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 80023a4:	2100      	movs	r1, #0
 80023a6:	2030      	movs	r0, #48	; 0x30
 80023a8:	f7ff fdf6 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 80023ac:	2100      	movs	r1, #0
 80023ae:	208d      	movs	r0, #141	; 0x8d
 80023b0:	f7ff fdf2 	bl	8001f98 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 80023b4:	2100      	movs	r1, #0
 80023b6:	2014      	movs	r0, #20
 80023b8:	f7ff fdee 	bl	8001f98 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 80023bc:	2100      	movs	r1, #0
 80023be:	20af      	movs	r0, #175	; 0xaf
 80023c0:	f7ff fdea 	bl	8001f98 <OLED_WR_Byte>
}  
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <Show_Encoder>:
//作    者：蒋欣桐
//日    期：2022/12/05
//版    本：0.0
//==================================================================
void Show_Encoder(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af02      	add	r7, sp, #8
	Encoder_Speed_R_Show=Get_Encoder_Speed_R();
 80023ce:	f7ff f8e3 	bl	8001598 <Get_Encoder_Speed_R>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <Show_Encoder+0x13c>)
 80023d6:	6013      	str	r3, [r2, #0]
	Encoder_Speed_L_Show=Get_Encoder_Speed_L();
 80023d8:	f7ff f91e 	bl	8001618 <Get_Encoder_Speed_L>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <Show_Encoder+0x140>)
 80023e0:	6013      	str	r3, [r2, #0]
	Encoder_Speed_R_Show_1=Get_digits(Encoder_Speed_R_Show, 1);
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <Show_Encoder+0x13c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fe86 	bl	80010fc <Get_digits>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b45      	ldr	r3, [pc, #276]	; (800250c <Show_Encoder+0x144>)
 80023f6:	601a      	str	r2, [r3, #0]
	Encoder_Speed_L_Show_1=Get_digits(Encoder_Speed_L_Show, 1);
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <Show_Encoder+0x140>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fe7b 	bl	80010fc <Get_digits>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <Show_Encoder+0x148>)
 800240c:	601a      	str	r2, [r3, #0]
	Encoder_Speed_R_Show_2=Get_digits(Encoder_Speed_R_Show, 2);
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <Show_Encoder+0x13c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fe70 	bl	80010fc <Get_digits>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <Show_Encoder+0x14c>)
 8002422:	601a      	str	r2, [r3, #0]
	Encoder_Speed_L_Show_1=Get_digits(Encoder_Speed_L_Show, 2);
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <Show_Encoder+0x140>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fe65 	bl	80010fc <Get_digits>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <Show_Encoder+0x148>)
 8002438:	601a      	str	r2, [r3, #0]

	OLED_ShowString(0, 0, Show_R_Encoder_Cot, 8);
 800243a:	2308      	movs	r3, #8
 800243c:	4a36      	ldr	r2, [pc, #216]	; (8002518 <Show_Encoder+0x150>)
 800243e:	2100      	movs	r1, #0
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff ff21 	bl	8002288 <OLED_ShowString>
	OLED_ShowString(0, 1, Show_L_Encoder_Cot, 8);
 8002446:	2308      	movs	r3, #8
 8002448:	4a34      	ldr	r2, [pc, #208]	; (800251c <Show_Encoder+0x154>)
 800244a:	2101      	movs	r1, #1
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff ff1b 	bl	8002288 <OLED_ShowString>

	OLED_ShowNum(30, 0, Encoder_Speed_R_Show, 3, 8);
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <Show_Encoder+0x13c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fe30 	bl	80010bc <__aeabi_f2uiz>
 800245c:	4602      	mov	r2, r0
 800245e:	2308      	movs	r3, #8
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2303      	movs	r3, #3
 8002464:	2100      	movs	r1, #0
 8002466:	201e      	movs	r0, #30
 8002468:	f7ff fea8 	bl	80021bc <OLED_ShowNum>
	OLED_ShowNum(30, 1, Encoder_Speed_L_Show, 3, 8);
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <Show_Encoder+0x140>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fe23 	bl	80010bc <__aeabi_f2uiz>
 8002476:	4602      	mov	r2, r0
 8002478:	2308      	movs	r3, #8
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2303      	movs	r3, #3
 800247e:	2101      	movs	r1, #1
 8002480:	201e      	movs	r0, #30
 8002482:	f7ff fe9b 	bl	80021bc <OLED_ShowNum>
	OLED_ShowString(45, 0, Show_Point, 8);
 8002486:	2308      	movs	r3, #8
 8002488:	4a25      	ldr	r2, [pc, #148]	; (8002520 <Show_Encoder+0x158>)
 800248a:	2100      	movs	r1, #0
 800248c:	202d      	movs	r0, #45	; 0x2d
 800248e:	f7ff fefb 	bl	8002288 <OLED_ShowString>
	OLED_ShowString(45, 1, Show_Point, 8);
 8002492:	2308      	movs	r3, #8
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <Show_Encoder+0x158>)
 8002496:	2101      	movs	r1, #1
 8002498:	202d      	movs	r0, #45	; 0x2d
 800249a:	f7ff fef5 	bl	8002288 <OLED_ShowString>
	OLED_ShowNum(53, 0, Encoder_Speed_R_Show_1, 2, 8);
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <Show_Encoder+0x144>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2308      	movs	r3, #8
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2302      	movs	r3, #2
 80024a8:	2100      	movs	r1, #0
 80024aa:	2035      	movs	r0, #53	; 0x35
 80024ac:	f7ff fe86 	bl	80021bc <OLED_ShowNum>
	OLED_ShowNum(53, 1, Encoder_Speed_L_Show_1, 2, 8);
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <Show_Encoder+0x148>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2308      	movs	r3, #8
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2302      	movs	r3, #2
 80024ba:	2101      	movs	r1, #1
 80024bc:	2035      	movs	r0, #53	; 0x35
 80024be:	f7ff fe7d 	bl	80021bc <OLED_ShowNum>
	OLED_ShowNum(63, 0, Encoder_Speed_R_Show_2, 2, 8);
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <Show_Encoder+0x14c>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2308      	movs	r3, #8
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2302      	movs	r3, #2
 80024cc:	2100      	movs	r1, #0
 80024ce:	203f      	movs	r0, #63	; 0x3f
 80024d0:	f7ff fe74 	bl	80021bc <OLED_ShowNum>
	OLED_ShowNum(63, 1, Encoder_Speed_L_Show_2, 2, 8);
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <Show_Encoder+0x15c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2308      	movs	r3, #8
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2302      	movs	r3, #2
 80024de:	2101      	movs	r1, #1
 80024e0:	203f      	movs	r0, #63	; 0x3f
 80024e2:	f7ff fe6b 	bl	80021bc <OLED_ShowNum>

	OLED_ShowString(73, 0, Show_cm_s, 8);
 80024e6:	2308      	movs	r3, #8
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <Show_Encoder+0x160>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	2049      	movs	r0, #73	; 0x49
 80024ee:	f7ff fecb 	bl	8002288 <OLED_ShowString>
	OLED_ShowString(73, 1, Show_cm_s, 8);
 80024f2:	2308      	movs	r3, #8
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <Show_Encoder+0x160>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	2049      	movs	r0, #73	; 0x49
 80024fa:	f7ff fec5 	bl	8002288 <OLED_ShowString>
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200001e8 	.word	0x200001e8
 8002508:	200001ec 	.word	0x200001ec
 800250c:	200001f0 	.word	0x200001f0
 8002510:	200001f8 	.word	0x200001f8
 8002514:	200001f4 	.word	0x200001f4
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004
 8002520:	20000008 	.word	0x20000008
 8002524:	200001fc 	.word	0x200001fc
 8002528:	2000000c 	.word	0x2000000c

0800252c <Show_Jy61>:
//作    者：蒋欣桐
//日    期：2022/12/24
//版    本：0.0
//==================================================================
void Show_Jy61()
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af02      	add	r7, sp, #8
	Jy61_X_Angle_Show=Jy61_X_Angle;
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <Show_Jy61+0x130>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <Show_Jy61+0x134>)
 8002538:	6013      	str	r3, [r2, #0]
	Jy61_X_Angle_Show_1=Get_digits(Jy61_X_Angle_Show, 1);
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <Show_Jy61+0x134>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fdda 	bl	80010fc <Get_digits>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b45      	ldr	r3, [pc, #276]	; (8002664 <Show_Jy61+0x138>)
 800254e:	601a      	str	r2, [r3, #0]
	Jy61_X_Angle_Show_2=Get_digits(Jy61_X_Angle_Show, 2);
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <Show_Jy61+0x134>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fdcf 	bl	80010fc <Get_digits>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <Show_Jy61+0x13c>)
 8002564:	601a      	str	r2, [r3, #0]

	OLED_ShowString(0, 2, Show_xAngle, sizeof(Show_xAngle));
 8002566:	2306      	movs	r3, #6
 8002568:	4a40      	ldr	r2, [pc, #256]	; (800266c <Show_Jy61+0x140>)
 800256a:	2102      	movs	r1, #2
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff fe8b 	bl	8002288 <OLED_ShowString>

	if(Jy61_X_Angle_Show>=0)
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <Show_Jy61+0x134>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fd64 	bl	8001048 <__aeabi_fcmpge>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d02b      	beq.n	80025de <Show_Jy61+0xb2>
	{
		OLED_ShowString(35, 2, show_blank, 12);
 8002586:	230c      	movs	r3, #12
 8002588:	4a39      	ldr	r2, [pc, #228]	; (8002670 <Show_Jy61+0x144>)
 800258a:	2102      	movs	r1, #2
 800258c:	2023      	movs	r0, #35	; 0x23
 800258e:	f7ff fe7b 	bl	8002288 <OLED_ShowString>
		OLED_ShowNum(40, 2, Jy61_X_Angle_Show,3 , 12);
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <Show_Jy61+0x134>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd90 	bl	80010bc <__aeabi_f2uiz>
 800259c:	4602      	mov	r2, r0
 800259e:	230c      	movs	r3, #12
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2303      	movs	r3, #3
 80025a4:	2102      	movs	r1, #2
 80025a6:	2028      	movs	r0, #40	; 0x28
 80025a8:	f7ff fe08 	bl	80021bc <OLED_ShowNum>
		OLED_ShowString(60, 2, Show_Point, 12);
 80025ac:	230c      	movs	r3, #12
 80025ae:	4a31      	ldr	r2, [pc, #196]	; (8002674 <Show_Jy61+0x148>)
 80025b0:	2102      	movs	r1, #2
 80025b2:	203c      	movs	r0, #60	; 0x3c
 80025b4:	f7ff fe68 	bl	8002288 <OLED_ShowString>
		OLED_ShowNum(65, 2, Jy61_X_Angle_Show_1,1 , 12);
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <Show_Jy61+0x138>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	230c      	movs	r3, #12
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	2102      	movs	r1, #2
 80025c4:	2041      	movs	r0, #65	; 0x41
 80025c6:	f7ff fdf9 	bl	80021bc <OLED_ShowNum>
		OLED_ShowNum(73, 2, Jy61_X_Angle_Show_2,1 , 12);
 80025ca:	4b27      	ldr	r3, [pc, #156]	; (8002668 <Show_Jy61+0x13c>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	230c      	movs	r3, #12
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	2102      	movs	r1, #2
 80025d6:	2049      	movs	r0, #73	; 0x49
 80025d8:	f7ff fdf0 	bl	80021bc <OLED_ShowNum>
		OLED_ShowString(60, 2, Show_Point, 12);
		OLED_ShowNum(65, 2, Jy61_X_Angle_Show_1,1 , 12);
		OLED_ShowNum(73, 2, Jy61_X_Angle_Show_2,1 , 12);
	}

}
 80025dc:	e03b      	b.n	8002656 <Show_Jy61+0x12a>
	else if(Jy61_X_Angle_Show<=0)
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <Show_Jy61+0x134>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fd24 	bl	8001034 <__aeabi_fcmple>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <Show_Jy61+0xc8>
}
 80025f2:	e030      	b.n	8002656 <Show_Jy61+0x12a>
		Jy61_X_Angle_Show=-Jy61_X_Angle_Show;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <Show_Jy61+0x134>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <Show_Jy61+0x134>)
 80025fe:	6013      	str	r3, [r2, #0]
		OLED_ShowString(35, 2, Show_minus, 12);
 8002600:	230c      	movs	r3, #12
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <Show_Jy61+0x14c>)
 8002604:	2102      	movs	r1, #2
 8002606:	2023      	movs	r0, #35	; 0x23
 8002608:	f7ff fe3e 	bl	8002288 <OLED_ShowString>
		OLED_ShowNum(40, 2, Jy61_X_Angle_Show,3 , 12);
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <Show_Jy61+0x134>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fd53 	bl	80010bc <__aeabi_f2uiz>
 8002616:	4602      	mov	r2, r0
 8002618:	230c      	movs	r3, #12
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2303      	movs	r3, #3
 800261e:	2102      	movs	r1, #2
 8002620:	2028      	movs	r0, #40	; 0x28
 8002622:	f7ff fdcb 	bl	80021bc <OLED_ShowNum>
		OLED_ShowString(60, 2, Show_Point, 12);
 8002626:	230c      	movs	r3, #12
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <Show_Jy61+0x148>)
 800262a:	2102      	movs	r1, #2
 800262c:	203c      	movs	r0, #60	; 0x3c
 800262e:	f7ff fe2b 	bl	8002288 <OLED_ShowString>
		OLED_ShowNum(65, 2, Jy61_X_Angle_Show_1,1 , 12);
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <Show_Jy61+0x138>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	230c      	movs	r3, #12
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2301      	movs	r3, #1
 800263c:	2102      	movs	r1, #2
 800263e:	2041      	movs	r0, #65	; 0x41
 8002640:	f7ff fdbc 	bl	80021bc <OLED_ShowNum>
		OLED_ShowNum(73, 2, Jy61_X_Angle_Show_2,1 , 12);
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <Show_Jy61+0x13c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	230c      	movs	r3, #12
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2301      	movs	r3, #1
 800264e:	2102      	movs	r1, #2
 8002650:	2049      	movs	r0, #73	; 0x49
 8002652:	f7ff fdb3 	bl	80021bc <OLED_ShowNum>
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200001d8 	.word	0x200001d8
 8002660:	20000200 	.word	0x20000200
 8002664:	20000204 	.word	0x20000204
 8002668:	20000208 	.word	0x20000208
 800266c:	20000014 	.word	0x20000014
 8002670:	20000020 	.word	0x20000020
 8002674:	20000008 	.word	0x20000008
 8002678:	2000001c 	.word	0x2000001c

0800267c <Show_PID>:
//作    者：蒋欣桐
//日    期：2022/1/29
//版    本：0.1
//==================================================================
void Show_PID(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af02      	add	r7, sp, #8
	Ang_Ring_Kp=sp_pid.Speed_Ring_Kp;
 8002682:	4b32      	ldr	r3, [pc, #200]	; (800274c <Show_PID+0xd0>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4a32      	ldr	r2, [pc, #200]	; (8002750 <Show_PID+0xd4>)
 8002688:	6013      	str	r3, [r2, #0]
	Ang_Ring_Kp_1=Get_digits(Ang_Ring_Kp, 1);
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <Show_PID+0xd4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fd32 	bl	80010fc <Get_digits>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <Show_PID+0xd8>)
 800269e:	601a      	str	r2, [r3, #0]
	Ang_Ring_Kd=pid.Kd;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <Show_PID+0xdc>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <Show_PID+0xe0>)
 80026a6:	6013      	str	r3, [r2, #0]
	Ang_Ring_Kd_1=Get_digits(Ang_Ring_Kd, 1);
 80026a8:	4b2c      	ldr	r3, [pc, #176]	; (800275c <Show_PID+0xe0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fd23 	bl	80010fc <Get_digits>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <Show_PID+0xe4>)
 80026bc:	601a      	str	r2, [r3, #0]

	OLED_ShowString(0, 3, Show_AKp, sizeof(Show_AKp));
 80026be:	2305      	movs	r3, #5
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <Show_PID+0xe8>)
 80026c2:	2103      	movs	r1, #3
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff fddf 	bl	8002288 <OLED_ShowString>
	OLED_ShowNum(30, 3, Ang_Ring_Kp, 3, 12);
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <Show_PID+0xd4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fcf4 	bl	80010bc <__aeabi_f2uiz>
 80026d4:	4602      	mov	r2, r0
 80026d6:	230c      	movs	r3, #12
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2303      	movs	r3, #3
 80026dc:	2103      	movs	r1, #3
 80026de:	201e      	movs	r0, #30
 80026e0:	f7ff fd6c 	bl	80021bc <OLED_ShowNum>
	OLED_ShowString(50, 3, Show_Point, 12);
 80026e4:	230c      	movs	r3, #12
 80026e6:	4a20      	ldr	r2, [pc, #128]	; (8002768 <Show_PID+0xec>)
 80026e8:	2103      	movs	r1, #3
 80026ea:	2032      	movs	r0, #50	; 0x32
 80026ec:	f7ff fdcc 	bl	8002288 <OLED_ShowString>
	OLED_ShowNum(55, 3, Ang_Ring_Kp_1, 1, 12);
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <Show_PID+0xd8>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	230c      	movs	r3, #12
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2301      	movs	r3, #1
 80026fa:	2103      	movs	r1, #3
 80026fc:	2037      	movs	r0, #55	; 0x37
 80026fe:	f7ff fd5d 	bl	80021bc <OLED_ShowNum>
	OLED_ShowString(62, 3, Show_AKd, sizeof(Show_AKd));
 8002702:	2305      	movs	r3, #5
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <Show_PID+0xf0>)
 8002706:	2103      	movs	r1, #3
 8002708:	203e      	movs	r0, #62	; 0x3e
 800270a:	f7ff fdbd 	bl	8002288 <OLED_ShowString>
	OLED_ShowNum(90, 3, Ang_Ring_Kd, 3, 12);
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <Show_PID+0xe0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fcd2 	bl	80010bc <__aeabi_f2uiz>
 8002718:	4602      	mov	r2, r0
 800271a:	230c      	movs	r3, #12
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2303      	movs	r3, #3
 8002720:	2103      	movs	r1, #3
 8002722:	205a      	movs	r0, #90	; 0x5a
 8002724:	f7ff fd4a 	bl	80021bc <OLED_ShowNum>
	OLED_ShowString(110, 3, Show_Point, 12);
 8002728:	230c      	movs	r3, #12
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <Show_PID+0xec>)
 800272c:	2103      	movs	r1, #3
 800272e:	206e      	movs	r0, #110	; 0x6e
 8002730:	f7ff fdaa 	bl	8002288 <OLED_ShowString>
	OLED_ShowNum(115, 3, Ang_Ring_Kd_1, 1, 12);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <Show_PID+0xe4>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	230c      	movs	r3, #12
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2301      	movs	r3, #1
 800273e:	2103      	movs	r1, #3
 8002740:	2073      	movs	r0, #115	; 0x73
 8002742:	f7ff fd3b 	bl	80021bc <OLED_ShowNum>



}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000124 	.word	0x20000124
 8002750:	2000020c 	.word	0x2000020c
 8002754:	20000214 	.word	0x20000214
 8002758:	200000dc 	.word	0x200000dc
 800275c:	20000210 	.word	0x20000210
 8002760:	20000218 	.word	0x20000218
 8002764:	20000024 	.word	0x20000024
 8002768:	20000008 	.word	0x20000008
 800276c:	2000002c 	.word	0x2000002c

08002770 <OLED_Show>:
//作    者：蒋欣桐
//日    期：2022/12/05
//版    本：0.0
//==================================================================
void OLED_Show(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	Show_Encoder();
 8002774:	f7ff fe28 	bl	80023c8 <Show_Encoder>
	Show_Jy61();
 8002778:	f7ff fed8 	bl	800252c <Show_Jy61>
	Show_PID();
 800277c:	f7ff ff7e 	bl	800267c <Show_PID>
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_MspInit+0x5c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_MspInit+0x5c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6193      	str	r3, [r2, #24]
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_MspInit+0x5c>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_MspInit+0x5c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x60>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_MspInit+0x60>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <NMI_Handler+0x4>

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282e:	f000 fb87 	bl	8002f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM2_IRQHandler+0x10>)
 800283e:	f001 ff73 	bl	8004728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000021c 	.word	0x2000021c

0800284c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM3_IRQHandler+0x10>)
 8002852:	f001 ff69 	bl	8004728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000264 	.word	0x20000264

08002860 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM4_IRQHandler+0x10>)
 8002866:	f001 ff5f 	bl	8004728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200002ac 	.word	0x200002ac

08002874 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <USART1_IRQHandler+0x10>)
 800287a:	f002 fd95 	bl	80053a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200002f4 	.word	0x200002f4

08002888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <USART2_IRQHandler+0x10>)
 800288e:	f002 fd8b 	bl	80053a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000338 	.word	0x20000338

0800289c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	; 0x38
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	f107 0320 	add.w	r3, r7, #32
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
 80028d4:	615a      	str	r2, [r3, #20]
 80028d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <MX_TIM2_Init+0xfc>)
 80028da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <MX_TIM2_Init+0xfc>)
 80028e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <MX_TIM2_Init+0xfc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 71;
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <MX_TIM2_Init+0xfc>)
 80028f0:	2247      	movs	r2, #71	; 0x47
 80028f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <MX_TIM2_Init+0xfc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <MX_TIM2_Init+0xfc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002900:	4828      	ldr	r0, [pc, #160]	; (80029a4 <MX_TIM2_Init+0xfc>)
 8002902:	f001 fc45 	bl	8004190 <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800290c:	f7ff f9f3 	bl	8001cf6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800291a:	4619      	mov	r1, r3
 800291c:	4821      	ldr	r0, [pc, #132]	; (80029a4 <MX_TIM2_Init+0xfc>)
 800291e:	f002 f8c9 	bl	8004ab4 <HAL_TIM_ConfigClockSource>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002928:	f7ff f9e5 	bl	8001cf6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800292c:	481d      	ldr	r0, [pc, #116]	; (80029a4 <MX_TIM2_Init+0xfc>)
 800292e:	f001 fcd1 	bl	80042d4 <HAL_TIM_PWM_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002938:	f7ff f9dd 	bl	8001cf6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002944:	f107 0320 	add.w	r3, r7, #32
 8002948:	4619      	mov	r1, r3
 800294a:	4816      	ldr	r0, [pc, #88]	; (80029a4 <MX_TIM2_Init+0xfc>)
 800294c:	f002 fc3e 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002956:	f7ff f9ce 	bl	8001cf6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800295a:	2360      	movs	r3, #96	; 0x60
 800295c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2200      	movs	r2, #0
 800296e:	4619      	mov	r1, r3
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <MX_TIM2_Init+0xfc>)
 8002972:	f001 ffe1 	bl	8004938 <HAL_TIM_PWM_ConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800297c:	f7ff f9bb 	bl	8001cf6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2204      	movs	r2, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <MX_TIM2_Init+0xfc>)
 8002988:	f001 ffd6 	bl	8004938 <HAL_TIM_PWM_ConfigChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002992:	f7ff f9b0 	bl	8001cf6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <MX_TIM2_Init+0xfc>)
 8002998:	f000 f94e 	bl	8002c38 <HAL_TIM_MspPostInit>

}
 800299c:	bf00      	nop
 800299e:	3738      	adds	r7, #56	; 0x38
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000021c 	.word	0x2000021c

080029a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 f8fe 	bl	8005bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <MX_TIM3_Init+0xa0>)
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <MX_TIM3_Init+0xa4>)
 80029c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <MX_TIM3_Init+0xa0>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <MX_TIM3_Init+0xa0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <MX_TIM3_Init+0xa0>)
 80029d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <MX_TIM3_Init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <MX_TIM3_Init+0xa0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ea:	2303      	movs	r3, #3
 80029ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 80029fa:	2306      	movs	r3, #6
 80029fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4619      	mov	r1, r3
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <MX_TIM3_Init+0xa0>)
 8002a16:	f001 fd57 	bl	80044c8 <HAL_TIM_Encoder_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a20:	f7ff f969 	bl	8001cf6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_TIM3_Init+0xa0>)
 8002a32:	f002 fbcb 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a3c:	f7ff f95b 	bl	8001cf6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000264 	.word	0x20000264
 8002a4c:	40000400 	.word	0x40000400

08002a50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 f8aa 	bl	8005bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <MX_TIM4_Init+0xa4>)
 8002a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a92:	2303      	movs	r3, #3
 8002a94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4619      	mov	r1, r3
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002abe:	f001 fd03 	bl	80044c8 <HAL_TIM_Encoder_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ac8:	f7ff f915 	bl	8001cf6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_TIM4_Init+0xa0>)
 8002ada:	f002 fb77 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ae4:	f7ff f907 	bl	8001cf6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200002ac 	.word	0x200002ac
 8002af4:	40000800 	.word	0x40000800

08002af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d113      	bne.n	8002b32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_TIM_Base_MspInit+0x44>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_TIM_Base_MspInit+0x44>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	61d3      	str	r3, [r2, #28]
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_TIM_Base_MspInit+0x44>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	201c      	movs	r0, #28
 8002b28:	f000 fb21 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b2c:	201c      	movs	r0, #28
 8002b2e:	f000 fb3a 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 0318 	add.w	r3, r7, #24
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d12c      	bne.n	8002bba <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b60:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	61d3      	str	r3, [r2, #28]
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L_ENCODER_A_Pin|L_ENCODER_B_Pin;
 8002b90:	23c0      	movs	r3, #192	; 0xc0
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 0318 	add.w	r3, r7, #24
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4822      	ldr	r0, [pc, #136]	; (8002c2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ba4:	f000 fbca 	bl	800333c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	201d      	movs	r0, #29
 8002bae:	f000 fade 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bb2:	201d      	movs	r0, #29
 8002bb4:	f000 faf7 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002bb8:	e030      	b.n	8002c1c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(tim_encoderHandle->Instance==TIM4)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d12b      	bne.n	8002c1c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	61d3      	str	r3, [r2, #28]
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	6193      	str	r3, [r2, #24]
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = R_ENCODER_A_Pin|R_ENCODER_B_Pin;
 8002bf4:	23c0      	movs	r3, #192	; 0xc0
 8002bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f107 0318 	add.w	r3, r7, #24
 8002c04:	4619      	mov	r1, r3
 8002c06:	480b      	ldr	r0, [pc, #44]	; (8002c34 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002c08:	f000 fb98 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	201e      	movs	r0, #30
 8002c12:	f000 faac 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c16:	201e      	movs	r0, #30
 8002c18:	f000 fac5 	bl	80031a6 <HAL_NVIC_EnableIRQ>
}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40010c00 	.word	0x40010c00

08002c38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d117      	bne.n	8002c88 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_TIM_MspPostInit+0x58>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <HAL_TIM_MspPostInit+0x58>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_TIM_MspPostInit+0x58>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 8002c70:	2303      	movs	r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	4619      	mov	r1, r3
 8002c82:	4804      	ldr	r0, [pc, #16]	; (8002c94 <HAL_TIM_MspPostInit+0x5c>)
 8002c84:	f000 fb5a 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c88:	bf00      	nop
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40010800 	.word	0x40010800

08002c98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <MX_USART1_UART_Init+0x50>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_USART1_UART_Init+0x4c>)
 8002cd0:	f002 faec 	bl	80052ac <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002cda:	f7ff f80c 	bl	8001cf6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200002f4 	.word	0x200002f4
 8002ce8:	40013800 	.word	0x40013800

08002cec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <MX_USART2_UART_Init+0x50>)
 8002cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_USART2_UART_Init+0x4c>)
 8002d24:	f002 fac2 	bl	80052ac <HAL_UART_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d2e:	f7fe ffe2 	bl	8001cf6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000338 	.word	0x20000338
 8002d3c:	40004400 	.word	0x40004400

08002d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0318 	add.w	r3, r7, #24
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <HAL_UART_MspInit+0x118>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d13a      	bne.n	8002dd6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d60:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6193      	str	r3, [r2, #24]
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 0318 	add.w	r3, r7, #24
 8002da2:	4619      	mov	r1, r3
 8002da4:	482e      	ldr	r0, [pc, #184]	; (8002e60 <HAL_UART_MspInit+0x120>)
 8002da6:	f000 fac9 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 0318 	add.w	r3, r7, #24
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4828      	ldr	r0, [pc, #160]	; (8002e60 <HAL_UART_MspInit+0x120>)
 8002dc0:	f000 fabc 	bl	800333c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2025      	movs	r0, #37	; 0x25
 8002dca:	f000 f9d0 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dce:	2025      	movs	r0, #37	; 0x25
 8002dd0:	f000 f9e9 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dd4:	e03c      	b.n	8002e50 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_UART_MspInit+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d137      	bne.n	8002e50 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dea:	61d3      	str	r3, [r2, #28]
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_UART_MspInit+0x11c>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPU_TX_Pin;
 8002e10:	2304      	movs	r3, #4
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPU_TX_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	f107 0318 	add.w	r3, r7, #24
 8002e20:	4619      	mov	r1, r3
 8002e22:	480f      	ldr	r0, [pc, #60]	; (8002e60 <HAL_UART_MspInit+0x120>)
 8002e24:	f000 fa8a 	bl	800333c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MPU_RX_Pin;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MPU_RX_GPIO_Port, &GPIO_InitStruct);
 8002e34:	f107 0318 	add.w	r3, r7, #24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4809      	ldr	r0, [pc, #36]	; (8002e60 <HAL_UART_MspInit+0x120>)
 8002e3c:	f000 fa7e 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	2026      	movs	r0, #38	; 0x26
 8002e46:	f000 f992 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e4a:	2026      	movs	r0, #38	; 0x26
 8002e4c:	f000 f9ab 	bl	80031a6 <HAL_NVIC_EnableIRQ>
}
 8002e50:	bf00      	nop
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40010800 	.word	0x40010800
 8002e64:	40004400 	.word	0x40004400

08002e68 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e8e:	f7ff fd05 	bl	800289c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e92:	f002 fe6d 	bl	8005b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e96:	f7fe fe8b 	bl	8001bb0 <main>
  bx lr
 8002e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002ea4:	08007220 	.word	0x08007220
  ldr r2, =_sbss
 8002ea8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002eac:	20000380 	.word	0x20000380

08002eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC1_2_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_Init+0x28>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_Init+0x28>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 f947 	bl	8003158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	200f      	movs	r0, #15
 8002ecc:	f000 f808 	bl	8002ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7ff fc58 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000

08002ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_InitTick+0x54>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_InitTick+0x58>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f95f 	bl	80031c2 <HAL_SYSTICK_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00e      	b.n	8002f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d80a      	bhi.n	8002f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f14:	2200      	movs	r2, #0
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f000 f927 	bl	800316e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <HAL_InitTick+0x5c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000034 	.word	0x20000034
 8002f38:	2000003c 	.word	0x2000003c
 8002f3c:	20000038 	.word	0x20000038

08002f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_IncTick+0x1c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_IncTick+0x20>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_IncTick+0x20>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	2000003c 	.word	0x2000003c
 8002f60:	2000037c 	.word	0x2000037c

08002f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTick;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetTick+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	2000037c 	.word	0x2000037c

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d005      	beq.n	8002f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_Delay+0x44>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9e:	bf00      	nop
 8002fa0:	f7ff ffe0 	bl	8002f64 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8f7      	bhi.n	8002fa0 <HAL_Delay+0x28>
  {
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000003c 	.word	0x2000003c

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <__NVIC_EnableIRQ+0x34>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003124:	d301      	bcc.n	800312a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <SysTick_Config+0x40>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003132:	210f      	movs	r1, #15
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f7ff ff90 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <SysTick_Config+0x40>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <SysTick_Config+0x40>)
 8003144:	2207      	movs	r2, #7
 8003146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000e010 	.word	0xe000e010

08003158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff2d 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff42 	bl	8003008 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff90 	bl	80030b0 <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5f 	bl	800305c <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff35 	bl	8003024 <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa2 	bl	8003114 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d008      	beq.n	8003202 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e020      	b.n	8003244 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 020e 	bic.w	r2, r2, #14
 8003210:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003262:	2b02      	cmp	r3, #2
 8003264:	d005      	beq.n	8003272 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e051      	b.n	8003316 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 020e 	bic.w	r2, r2, #14
 8003280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_DMA_Abort_IT+0xd0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d029      	beq.n	80032f0 <HAL_DMA_Abort_IT+0xa0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_DMA_Abort_IT+0xd4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_DMA_Abort_IT+0x9c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_DMA_Abort_IT+0xd8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d01a      	beq.n	80032e6 <HAL_DMA_Abort_IT+0x96>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_DMA_Abort_IT+0xdc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d012      	beq.n	80032e0 <HAL_DMA_Abort_IT+0x90>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_DMA_Abort_IT+0xe0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00a      	beq.n	80032da <HAL_DMA_Abort_IT+0x8a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_DMA_Abort_IT+0xe4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d102      	bne.n	80032d4 <HAL_DMA_Abort_IT+0x84>
 80032ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032d2:	e00e      	b.n	80032f2 <HAL_DMA_Abort_IT+0xa2>
 80032d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d8:	e00b      	b.n	80032f2 <HAL_DMA_Abort_IT+0xa2>
 80032da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032de:	e008      	b.n	80032f2 <HAL_DMA_Abort_IT+0xa2>
 80032e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e4:	e005      	b.n	80032f2 <HAL_DMA_Abort_IT+0xa2>
 80032e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ea:	e002      	b.n	80032f2 <HAL_DMA_Abort_IT+0xa2>
 80032ec:	2310      	movs	r3, #16
 80032ee:	e000      	b.n	80032f2 <HAL_DMA_Abort_IT+0xa2>
 80032f0:	2301      	movs	r3, #1
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <HAL_DMA_Abort_IT+0xe8>)
 80032f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
    } 
  }
  return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40020008 	.word	0x40020008
 8003324:	4002001c 	.word	0x4002001c
 8003328:	40020030 	.word	0x40020030
 800332c:	40020044 	.word	0x40020044
 8003330:	40020058 	.word	0x40020058
 8003334:	4002006c 	.word	0x4002006c
 8003338:	40020000 	.word	0x40020000

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b08b      	sub	sp, #44	; 0x2c
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334e:	e169      	b.n	8003624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003350:	2201      	movs	r2, #1
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8158 	bne.w	800361e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a9a      	ldr	r2, [pc, #616]	; (80035dc <HAL_GPIO_Init+0x2a0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d05e      	beq.n	8003436 <HAL_GPIO_Init+0xfa>
 8003378:	4a98      	ldr	r2, [pc, #608]	; (80035dc <HAL_GPIO_Init+0x2a0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d875      	bhi.n	800346a <HAL_GPIO_Init+0x12e>
 800337e:	4a98      	ldr	r2, [pc, #608]	; (80035e0 <HAL_GPIO_Init+0x2a4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d058      	beq.n	8003436 <HAL_GPIO_Init+0xfa>
 8003384:	4a96      	ldr	r2, [pc, #600]	; (80035e0 <HAL_GPIO_Init+0x2a4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d86f      	bhi.n	800346a <HAL_GPIO_Init+0x12e>
 800338a:	4a96      	ldr	r2, [pc, #600]	; (80035e4 <HAL_GPIO_Init+0x2a8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d052      	beq.n	8003436 <HAL_GPIO_Init+0xfa>
 8003390:	4a94      	ldr	r2, [pc, #592]	; (80035e4 <HAL_GPIO_Init+0x2a8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d869      	bhi.n	800346a <HAL_GPIO_Init+0x12e>
 8003396:	4a94      	ldr	r2, [pc, #592]	; (80035e8 <HAL_GPIO_Init+0x2ac>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04c      	beq.n	8003436 <HAL_GPIO_Init+0xfa>
 800339c:	4a92      	ldr	r2, [pc, #584]	; (80035e8 <HAL_GPIO_Init+0x2ac>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d863      	bhi.n	800346a <HAL_GPIO_Init+0x12e>
 80033a2:	4a92      	ldr	r2, [pc, #584]	; (80035ec <HAL_GPIO_Init+0x2b0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d046      	beq.n	8003436 <HAL_GPIO_Init+0xfa>
 80033a8:	4a90      	ldr	r2, [pc, #576]	; (80035ec <HAL_GPIO_Init+0x2b0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d85d      	bhi.n	800346a <HAL_GPIO_Init+0x12e>
 80033ae:	2b12      	cmp	r3, #18
 80033b0:	d82a      	bhi.n	8003408 <HAL_GPIO_Init+0xcc>
 80033b2:	2b12      	cmp	r3, #18
 80033b4:	d859      	bhi.n	800346a <HAL_GPIO_Init+0x12e>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_GPIO_Init+0x80>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	08003437 	.word	0x08003437
 80033c0:	08003411 	.word	0x08003411
 80033c4:	08003423 	.word	0x08003423
 80033c8:	08003465 	.word	0x08003465
 80033cc:	0800346b 	.word	0x0800346b
 80033d0:	0800346b 	.word	0x0800346b
 80033d4:	0800346b 	.word	0x0800346b
 80033d8:	0800346b 	.word	0x0800346b
 80033dc:	0800346b 	.word	0x0800346b
 80033e0:	0800346b 	.word	0x0800346b
 80033e4:	0800346b 	.word	0x0800346b
 80033e8:	0800346b 	.word	0x0800346b
 80033ec:	0800346b 	.word	0x0800346b
 80033f0:	0800346b 	.word	0x0800346b
 80033f4:	0800346b 	.word	0x0800346b
 80033f8:	0800346b 	.word	0x0800346b
 80033fc:	0800346b 	.word	0x0800346b
 8003400:	08003419 	.word	0x08003419
 8003404:	0800342d 	.word	0x0800342d
 8003408:	4a79      	ldr	r2, [pc, #484]	; (80035f0 <HAL_GPIO_Init+0x2b4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800340e:	e02c      	b.n	800346a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	623b      	str	r3, [r7, #32]
          break;
 8003416:	e029      	b.n	800346c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	3304      	adds	r3, #4
 800341e:	623b      	str	r3, [r7, #32]
          break;
 8003420:	e024      	b.n	800346c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	3308      	adds	r3, #8
 8003428:	623b      	str	r3, [r7, #32]
          break;
 800342a:	e01f      	b.n	800346c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	330c      	adds	r3, #12
 8003432:	623b      	str	r3, [r7, #32]
          break;
 8003434:	e01a      	b.n	800346c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800343e:	2304      	movs	r3, #4
 8003440:	623b      	str	r3, [r7, #32]
          break;
 8003442:	e013      	b.n	800346c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800344c:	2308      	movs	r3, #8
 800344e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	611a      	str	r2, [r3, #16]
          break;
 8003456:	e009      	b.n	800346c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003458:	2308      	movs	r3, #8
 800345a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	615a      	str	r2, [r3, #20]
          break;
 8003462:	e003      	b.n	800346c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
          break;
 8003468:	e000      	b.n	800346c <HAL_GPIO_Init+0x130>
          break;
 800346a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2bff      	cmp	r3, #255	; 0xff
 8003470:	d801      	bhi.n	8003476 <HAL_GPIO_Init+0x13a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	e001      	b.n	800347a <HAL_GPIO_Init+0x13e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	d802      	bhi.n	8003488 <HAL_GPIO_Init+0x14c>
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	e002      	b.n	800348e <HAL_GPIO_Init+0x152>
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	3b08      	subs	r3, #8
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	210f      	movs	r1, #15
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	6a39      	ldr	r1, [r7, #32]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80b1 	beq.w	800361e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <HAL_GPIO_Init+0x2b8>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_GPIO_Init+0x2b8>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6193      	str	r3, [r2, #24]
 80034c8:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_GPIO_Init+0x2b8>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034d4:	4a48      	ldr	r2, [pc, #288]	; (80035f8 <HAL_GPIO_Init+0x2bc>)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a40      	ldr	r2, [pc, #256]	; (80035fc <HAL_GPIO_Init+0x2c0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_GPIO_Init+0x1ec>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3f      	ldr	r2, [pc, #252]	; (8003600 <HAL_GPIO_Init+0x2c4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00d      	beq.n	8003524 <HAL_GPIO_Init+0x1e8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3e      	ldr	r2, [pc, #248]	; (8003604 <HAL_GPIO_Init+0x2c8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <HAL_GPIO_Init+0x1e4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <HAL_GPIO_Init+0x2cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_GPIO_Init+0x1e0>
 8003518:	2303      	movs	r3, #3
 800351a:	e006      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 800351c:	2304      	movs	r3, #4
 800351e:	e004      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003520:	2302      	movs	r3, #2
 8003522:	e002      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003528:	2300      	movs	r3, #0
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	f002 0203 	and.w	r2, r2, #3
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	4093      	lsls	r3, r2
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800353a:	492f      	ldr	r1, [pc, #188]	; (80035f8 <HAL_GPIO_Init+0x2bc>)
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_GPIO_Init+0x2d0>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	492c      	ldr	r1, [pc, #176]	; (800360c <HAL_GPIO_Init+0x2d0>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <HAL_GPIO_Init+0x2d0>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	43db      	mvns	r3, r3
 800356a:	4928      	ldr	r1, [pc, #160]	; (800360c <HAL_GPIO_Init+0x2d0>)
 800356c:	4013      	ands	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d006      	beq.n	800358a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_GPIO_Init+0x2d0>)
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4922      	ldr	r1, [pc, #136]	; (800360c <HAL_GPIO_Init+0x2d0>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	e006      	b.n	8003598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_GPIO_Init+0x2d0>)
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	43db      	mvns	r3, r3
 8003592:	491e      	ldr	r1, [pc, #120]	; (800360c <HAL_GPIO_Init+0x2d0>)
 8003594:	4013      	ands	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d006      	beq.n	80035b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_GPIO_Init+0x2d0>)
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4918      	ldr	r1, [pc, #96]	; (800360c <HAL_GPIO_Init+0x2d0>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]
 80035b0:	e006      	b.n	80035c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_GPIO_Init+0x2d0>)
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	4914      	ldr	r1, [pc, #80]	; (800360c <HAL_GPIO_Init+0x2d0>)
 80035bc:	4013      	ands	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d021      	beq.n	8003610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_GPIO_Init+0x2d0>)
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <HAL_GPIO_Init+0x2d0>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60cb      	str	r3, [r1, #12]
 80035d8:	e021      	b.n	800361e <HAL_GPIO_Init+0x2e2>
 80035da:	bf00      	nop
 80035dc:	10320000 	.word	0x10320000
 80035e0:	10310000 	.word	0x10310000
 80035e4:	10220000 	.word	0x10220000
 80035e8:	10210000 	.word	0x10210000
 80035ec:	10120000 	.word	0x10120000
 80035f0:	10110000 	.word	0x10110000
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40010800 	.word	0x40010800
 8003600:	40010c00 	.word	0x40010c00
 8003604:	40011000 	.word	0x40011000
 8003608:	40011400 	.word	0x40011400
 800360c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_GPIO_Init+0x304>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	43db      	mvns	r3, r3
 8003618:	4909      	ldr	r1, [pc, #36]	; (8003640 <HAL_GPIO_Init+0x304>)
 800361a:	4013      	ands	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	3301      	adds	r3, #1
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	f47f ae8e 	bne.w	8003350 <HAL_GPIO_Init+0x14>
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	372c      	adds	r7, #44	; 0x2c
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e001      	b.n	8003666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
 800367e:	4613      	mov	r3, r2
 8003680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003682:	787b      	ldrb	r3, [r7, #1]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800368e:	e003      	b.n	8003698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	611a      	str	r2, [r3, #16]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b4:	887a      	ldrh	r2, [r7, #2]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	041a      	lsls	r2, r3, #16
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43d9      	mvns	r1, r3
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	400b      	ands	r3, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e12b      	b.n	800393e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe f8a6 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003738:	f000 fce4 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 800373c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a81      	ldr	r2, [pc, #516]	; (8003948 <HAL_I2C_Init+0x274>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d807      	bhi.n	8003758 <HAL_I2C_Init+0x84>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a80      	ldr	r2, [pc, #512]	; (800394c <HAL_I2C_Init+0x278>)
 800374c:	4293      	cmp	r3, r2
 800374e:	bf94      	ite	ls
 8003750:	2301      	movls	r3, #1
 8003752:	2300      	movhi	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e006      	b.n	8003766 <HAL_I2C_Init+0x92>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a7d      	ldr	r2, [pc, #500]	; (8003950 <HAL_I2C_Init+0x27c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	bf94      	ite	ls
 8003760:	2301      	movls	r3, #1
 8003762:	2300      	movhi	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0e7      	b.n	800393e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a78      	ldr	r2, [pc, #480]	; (8003954 <HAL_I2C_Init+0x280>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0c9b      	lsrs	r3, r3, #18
 8003778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_I2C_Init+0x274>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d802      	bhi.n	80037a8 <HAL_I2C_Init+0xd4>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3301      	adds	r3, #1
 80037a6:	e009      	b.n	80037bc <HAL_I2C_Init+0xe8>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	4a69      	ldr	r2, [pc, #420]	; (8003958 <HAL_I2C_Init+0x284>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	3301      	adds	r3, #1
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	495c      	ldr	r1, [pc, #368]	; (8003948 <HAL_I2C_Init+0x274>)
 80037d8:	428b      	cmp	r3, r1
 80037da:	d819      	bhi.n	8003810 <HAL_I2C_Init+0x13c>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e59      	subs	r1, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037f0:	400b      	ands	r3, r1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_I2C_Init+0x138>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1e59      	subs	r1, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fbb1 f3f3 	udiv	r3, r1, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	e051      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 800380c:	2304      	movs	r3, #4
 800380e:	e04f      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <HAL_I2C_Init+0x168>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	440b      	add	r3, r1
 8003826:	fbb0 f3f3 	udiv	r3, r0, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e012      	b.n	8003862 <HAL_I2C_Init+0x18e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	0099      	lsls	r1, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Init+0x196>
 8003866:	2301      	movs	r3, #1
 8003868:	e022      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10e      	bne.n	8003890 <HAL_I2C_Init+0x1bc>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1e58      	subs	r0, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	440b      	add	r3, r1
 8003880:	fbb0 f3f3 	udiv	r3, r0, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388e:	e00f      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	0099      	lsls	r1, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	6809      	ldr	r1, [r1, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6911      	ldr	r1, [r2, #16]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	000186a0 	.word	0x000186a0
 800394c:	001e847f 	.word	0x001e847f
 8003950:	003d08ff 	.word	0x003d08ff
 8003954:	431bde83 	.word	0x431bde83
 8003958:	10624dd3 	.word	0x10624dd3

0800395c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e272      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8087 	beq.w	8003a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800397c:	4b92      	ldr	r3, [pc, #584]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b04      	cmp	r3, #4
 8003986:	d00c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003988:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d112      	bne.n	80039ba <HAL_RCC_OscConfig+0x5e>
 8003994:	4b8c      	ldr	r3, [pc, #560]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d10b      	bne.n	80039ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a2:	4b89      	ldr	r3, [pc, #548]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d06c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x12c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d168      	bne.n	8003a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e24c      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x76>
 80039c4:	4b80      	ldr	r3, [pc, #512]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7f      	ldr	r2, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	e02e      	b.n	8003a30 <HAL_RCC_OscConfig+0xd4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7a      	ldr	r2, [pc, #488]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a77      	ldr	r2, [pc, #476]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xd4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0xbc>
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a71      	ldr	r2, [pc, #452]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6e      	ldr	r2, [pc, #440]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xd4>
 8003a18:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6a      	ldr	r2, [pc, #424]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7ff fa94 	bl	8002f64 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7ff fa90 	bl	8002f64 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e200      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b5d      	ldr	r3, [pc, #372]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe4>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7ff fa80 	bl	8002f64 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7ff fa7c 	bl	8002f64 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1ec      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x10c>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a96:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aa2:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d11c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x18c>
 8003aae:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d116      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x176>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1c0      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4939      	ldr	r1, [pc, #228]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	e03a      	b.n	8003b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7ff fa35 	bl	8002f64 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afe:	f7ff fa31 	bl	8002f64 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1a1      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4927      	ldr	r1, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7ff fa14 	bl	8002f64 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7ff fa10 	bl	8002f64 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e180      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d03a      	beq.n	8003be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d019      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_RCC_OscConfig+0x274>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7ff f9f4 	bl	8002f64 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b80:	f7ff f9f0 	bl	8002f64 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e160      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f000 fad8 	bl	8004154 <RCC_Delay>
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bac:	f7ff f9da 	bl	8002f64 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb2:	e00f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7ff f9d6 	bl	8002f64 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d908      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e146      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	42420000 	.word	0x42420000
 8003bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e9      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80a6 	beq.w	8003d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4a87      	ldr	r2, [pc, #540]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	61d3      	str	r3, [r2, #28]
 8003c0a:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b82      	ldr	r3, [pc, #520]	; (8003e24 <HAL_RCC_OscConfig+0x4c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b7f      	ldr	r3, [pc, #508]	; (8003e24 <HAL_RCC_OscConfig+0x4c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	; (8003e24 <HAL_RCC_OscConfig+0x4c8>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7ff f997 	bl	8002f64 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7ff f993 	bl	8002f64 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e103      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b75      	ldr	r3, [pc, #468]	; (8003e24 <HAL_RCC_OscConfig+0x4c8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x312>
 8003c60:	4b6f      	ldr	r3, [pc, #444]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	4a6e      	ldr	r2, [pc, #440]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6213      	str	r3, [r2, #32]
 8003c6c:	e02d      	b.n	8003cca <HAL_RCC_OscConfig+0x36e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x334>
 8003c76:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a69      	ldr	r2, [pc, #420]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6213      	str	r3, [r2, #32]
 8003c82:	4b67      	ldr	r3, [pc, #412]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a66      	ldr	r2, [pc, #408]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	6213      	str	r3, [r2, #32]
 8003c8e:	e01c      	b.n	8003cca <HAL_RCC_OscConfig+0x36e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b05      	cmp	r3, #5
 8003c96:	d10c      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x356>
 8003c98:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4a60      	ldr	r2, [pc, #384]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	6213      	str	r3, [r2, #32]
 8003ca4:	4b5e      	ldr	r3, [pc, #376]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4a5d      	ldr	r2, [pc, #372]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6213      	str	r3, [r2, #32]
 8003cb0:	e00b      	b.n	8003cca <HAL_RCC_OscConfig+0x36e>
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a5a      	ldr	r2, [pc, #360]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6213      	str	r3, [r2, #32]
 8003cbe:	4b58      	ldr	r3, [pc, #352]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4a57      	ldr	r2, [pc, #348]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7ff f947 	bl	8002f64 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7ff f943 	bl	8002f64 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0b1      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ee      	beq.n	8003cda <HAL_RCC_OscConfig+0x37e>
 8003cfc:	e014      	b.n	8003d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfe:	f7ff f931 	bl	8002f64 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7ff f92d 	bl	8002f64 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e09b      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1c:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ee      	bne.n	8003d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d105      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2e:	4b3c      	ldr	r3, [pc, #240]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4a3b      	ldr	r2, [pc, #236]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8087 	beq.w	8003e52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d44:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d061      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d146      	bne.n	8003de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d58:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7ff f901 	bl	8002f64 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d66:	f7ff f8fd 	bl	8002f64 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e06d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d78:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d108      	bne.n	8003da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4921      	ldr	r1, [pc, #132]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a19      	ldr	r1, [r3, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	430b      	orrs	r3, r1
 8003db2:	491b      	ldr	r1, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7ff f8d1 	bl	8002f64 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7ff f8cd 	bl	8002f64 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e03d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x46a>
 8003de4:	e035      	b.n	8003e52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_RCC_OscConfig+0x4cc>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7ff f8ba 	bl	8002f64 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7ff f8b6 	bl	8002f64 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e026      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x498>
 8003e12:	e01e      	b.n	8003e52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e019      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x500>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000

08003e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0d0      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e74:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d910      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 0207 	bic.w	r2, r3, #7
 8003e8a:	4965      	ldr	r1, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d040      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d115      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e073      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06b      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4936      	ldr	r1, [pc, #216]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f50:	f7ff f808 	bl	8002f64 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f58:	f7ff f804 	bl	8002f64 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e053      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 020c 	and.w	r2, r3, #12
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d1eb      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f80:	4b27      	ldr	r3, [pc, #156]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d210      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 0207 	bic.w	r2, r3, #7
 8003f96:	4922      	ldr	r1, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f821 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1cc>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1d0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe ff66 	bl	8002ee0 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40022000 	.word	0x40022000
 8004024:	40021000 	.word	0x40021000
 8004028:	080071d0 	.word	0x080071d0
 800402c:	20000034 	.word	0x20000034
 8004030:	20000038 	.word	0x20000038

08004034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	b490      	push	{r4, r7}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800403a:	4b29      	ldr	r3, [pc, #164]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800403c:	1d3c      	adds	r4, r7, #4
 800403e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004044:	f240 2301 	movw	r3, #513	; 0x201
 8004048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d002      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x40>
 800406e:	2b08      	cmp	r3, #8
 8004070:	d003      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0x46>
 8004072:	e02b      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004076:	623b      	str	r3, [r7, #32]
      break;
 8004078:	e02b      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	0c9b      	lsrs	r3, r3, #18
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	443b      	add	r3, r7
 8004086:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800408a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0c5b      	lsrs	r3, r3, #17
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	3328      	adds	r3, #40	; 0x28
 80040a2:	443b      	add	r3, r7
 80040a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040ae:	fb03 f202 	mul.w	r2, r3, r2
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	e004      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	623b      	str	r3, [r7, #32]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040ce:	623b      	str	r3, [r7, #32]
      break;
 80040d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d2:	6a3b      	ldr	r3, [r7, #32]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc90      	pop	{r4, r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	080069a8 	.word	0x080069a8
 80040e4:	40021000 	.word	0x40021000
 80040e8:	007a1200 	.word	0x007a1200
 80040ec:	003d0900 	.word	0x003d0900

080040f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b02      	ldr	r3, [pc, #8]	; (8004100 <HAL_RCC_GetHCLKFreq+0x10>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000034 	.word	0x20000034

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004108:	f7ff fff2 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	080071e0 	.word	0x080071e0

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004130:	f7ff ffde 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	0adb      	lsrs	r3, r3, #11
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	080071e0 	.word	0x080071e0

08004154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <RCC_Delay+0x34>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <RCC_Delay+0x38>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0a5b      	lsrs	r3, r3, #9
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004170:	bf00      	nop
  }
  while (Delay --);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <RCC_Delay+0x1c>
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	20000034 	.word	0x20000034
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e041      	b.n	8004226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fc9e 	bl	8002af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 fd58 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e03a      	b.n	80042be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <HAL_TIM_Base_Start_IT+0x98>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x58>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d009      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x58>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_TIM_Base_Start_IT+0x9c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x58>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b06      	cmp	r3, #6
 8004298:	d010      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	e007      	b.n	80042bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800

080042d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e041      	b.n	800436a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f839 	bl	8004372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fcb6 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_TIM_PWM_Start+0x24>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e022      	b.n	80043ee <HAL_TIM_PWM_Start+0x6a>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d109      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x3e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	bf14      	ite	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	2300      	moveq	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	e015      	b.n	80043ee <HAL_TIM_PWM_Start+0x6a>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d109      	bne.n	80043dc <HAL_TIM_PWM_Start+0x58>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e008      	b.n	80043ee <HAL_TIM_PWM_Start+0x6a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e05e      	b.n	80044b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0x82>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004404:	e013      	b.n	800442e <HAL_TIM_PWM_Start+0xaa>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0x92>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004414:	e00b      	b.n	800442e <HAL_TIM_PWM_Start+0xaa>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xa2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004424:	e003      	b.n	800442e <HAL_TIM_PWM_Start+0xaa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fea4 	bl	8005184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <HAL_TIM_PWM_Start+0x138>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d107      	bne.n	8004456 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_TIM_PWM_Start+0x138>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIM_PWM_Start+0xfa>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d009      	beq.n	800447e <HAL_TIM_PWM_Start+0xfa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_TIM_PWM_Start+0x13c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIM_PWM_Start+0xfa>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <HAL_TIM_PWM_Start+0x140>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d111      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b06      	cmp	r3, #6
 800448e:	d010      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	e007      	b.n	80044b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800

080044c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e093      	b.n	8004604 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7fe fb25 	bl	8002b40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450c:	f023 0307 	bic.w	r3, r3, #7
 8004510:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fbb1 	bl	8004c84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	4313      	orrs	r3, r2
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004568:	f023 030c 	bic.w	r3, r3, #12
 800456c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	4313      	orrs	r3, r2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	011a      	lsls	r2, r3, #4
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	031b      	lsls	r3, r3, #12
 8004598:	4313      	orrs	r3, r2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	4313      	orrs	r3, r2
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800462c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004634:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d102      	bne.n	8004648 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004642:	7b7b      	ldrb	r3, [r7, #13]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d001      	beq.n	800464c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e069      	b.n	8004720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	e031      	b.n	80046c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d110      	bne.n	8004686 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004664:	7bbb      	ldrb	r3, [r7, #14]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d102      	bne.n	8004670 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800466a:	7b3b      	ldrb	r3, [r7, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d001      	beq.n	8004674 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e055      	b.n	8004720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004684:	e01d      	b.n	80046c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d108      	bne.n	800469e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800468c:	7bbb      	ldrb	r3, [r7, #14]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d105      	bne.n	800469e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004692:	7b7b      	ldrb	r3, [r7, #13]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d102      	bne.n	800469e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004698:	7b3b      	ldrb	r3, [r7, #12]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e03e      	b.n	8004720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_TIM_Encoder_Start+0xc4>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d008      	beq.n	80046e0 <HAL_TIM_Encoder_Start+0xd4>
 80046ce:	e00f      	b.n	80046f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fd53 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 80046de:	e016      	b.n	800470e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	2104      	movs	r1, #4
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fd4b 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 80046ee:	e00e      	b.n	800470e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fd43 	bl	8005184 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	2104      	movs	r1, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fd3c 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 800470c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d122      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d11b      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0202 	mvn.w	r2, #2
 8004754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa6f 	bl	8004c4e <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa62 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fa71 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0204 	mvn.w	r2, #4
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa45 	bl	8004c4e <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa38 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa47 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0208 	mvn.w	r2, #8
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2204      	movs	r2, #4
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa1b 	bl	8004c4e <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa0e 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa1d 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2208      	movs	r2, #8
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9f1 	bl	8004c4e <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9e4 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f9f3 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0201 	mvn.w	r2, #1
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd f934 	bl	8001b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d10e      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d107      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fce1 	bl	800529a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9b7 	bl	8004c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b20      	cmp	r3, #32
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0220 	mvn.w	r2, #32
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fcac 	bl	8005288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800494e:	2302      	movs	r3, #2
 8004950:	e0ac      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x174>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	f200 809f 	bhi.w	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	0800499d 	.word	0x0800499d
 800496c:	08004aa1 	.word	0x08004aa1
 8004970:	08004aa1 	.word	0x08004aa1
 8004974:	08004aa1 	.word	0x08004aa1
 8004978:	080049dd 	.word	0x080049dd
 800497c:	08004aa1 	.word	0x08004aa1
 8004980:	08004aa1 	.word	0x08004aa1
 8004984:	08004aa1 	.word	0x08004aa1
 8004988:	08004a1f 	.word	0x08004a1f
 800498c:	08004aa1 	.word	0x08004aa1
 8004990:	08004aa1 	.word	0x08004aa1
 8004994:	08004aa1 	.word	0x08004aa1
 8004998:	08004a5f 	.word	0x08004a5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f9d0 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0208 	orr.w	r2, r2, #8
 80049b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0204 	bic.w	r2, r2, #4
 80049c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6999      	ldr	r1, [r3, #24]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	619a      	str	r2, [r3, #24]
      break;
 80049da:	e062      	b.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa16 	bl	8004e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6999      	ldr	r1, [r3, #24]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	021a      	lsls	r2, r3, #8
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	619a      	str	r2, [r3, #24]
      break;
 8004a1c:	e041      	b.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fa5f 	bl	8004ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0208 	orr.w	r2, r2, #8
 8004a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0204 	bic.w	r2, r2, #4
 8004a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69d9      	ldr	r1, [r3, #28]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	61da      	str	r2, [r3, #28]
      break;
 8004a5c:	e021      	b.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 faa9 	bl	8004fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69d9      	ldr	r1, [r3, #28]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	021a      	lsls	r2, r3, #8
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	61da      	str	r2, [r3, #28]
      break;
 8004a9e:	e000      	b.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004aa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_ConfigClockSource+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0b3      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x180>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b04:	d03e      	beq.n	8004b84 <HAL_TIM_ConfigClockSource+0xd0>
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	f200 8087 	bhi.w	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	f000 8085 	beq.w	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1a:	d87f      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d01a      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0xa2>
 8004b20:	2b70      	cmp	r3, #112	; 0x70
 8004b22:	d87b      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b24:	2b60      	cmp	r3, #96	; 0x60
 8004b26:	d050      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x116>
 8004b28:	2b60      	cmp	r3, #96	; 0x60
 8004b2a:	d877      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d03c      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0xf6>
 8004b30:	2b50      	cmp	r3, #80	; 0x50
 8004b32:	d873      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d058      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x136>
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d86f      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d064      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x156>
 8004b40:	2b30      	cmp	r3, #48	; 0x30
 8004b42:	d86b      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d060      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x156>
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d867      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x156>
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d05a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b54:	e062      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6899      	ldr	r1, [r3, #8]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f000 faee 	bl	8005146 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	609a      	str	r2, [r3, #8]
      break;
 8004b82:	e04e      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f000 fad7 	bl	8005146 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba6:	609a      	str	r2, [r3, #8]
      break;
 8004ba8:	e03b      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f000 fa4e 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2150      	movs	r1, #80	; 0x50
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 faa5 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004bc8:	e02b      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 fa6c 	bl	80050b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2160      	movs	r1, #96	; 0x60
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fa95 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004be8:	e01b      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 fa2e 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2140      	movs	r1, #64	; 0x40
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa85 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004c08:	e00b      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f000 fa7c 	bl	8005112 <TIM_ITRx_SetConfig>
        break;
 8004c1a:	e002      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c1c:	bf00      	nop
 8004c1e:	e000      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_Base_SetConfig+0xb8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00b      	beq.n	8004cb4 <TIM_Base_SetConfig+0x30>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d007      	beq.n	8004cb4 <TIM_Base_SetConfig+0x30>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <TIM_Base_SetConfig+0xbc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_Base_SetConfig+0x30>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <TIM_Base_SetConfig+0xc0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <TIM_Base_SetConfig+0xb8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x62>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d007      	beq.n	8004ce6 <TIM_Base_SetConfig+0x62>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <TIM_Base_SetConfig+0xbc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_Base_SetConfig+0x62>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <TIM_Base_SetConfig+0xc0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d108      	bne.n	8004cf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <TIM_Base_SetConfig+0xb8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d103      	bne.n	8004d2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	615a      	str	r2, [r3, #20]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <TIM_OC1_SetConfig+0xc8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10c      	bne.n	8004dbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0308 	bic.w	r3, r3, #8
 8004daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0304 	bic.w	r3, r3, #4
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <TIM_OC1_SetConfig+0xc8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d111      	bne.n	8004dea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0210 	bic.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0320 	bic.w	r3, r3, #32
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <TIM_OC2_SetConfig+0xd0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10d      	bne.n	8004e90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <TIM_OC2_SetConfig+0xd0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d113      	bne.n	8004ec0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00

08004ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10d      	bne.n	8004f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00

08004fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <TIM_OC4_SetConfig+0x98>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d109      	bne.n	8005030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40012c00 	.word	0x40012c00

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 0210 	bic.w	r2, r3, #16
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	031b      	lsls	r3, r3, #12
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	f043 0307 	orr.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005146:	b480      	push	{r7}
 8005148:	b087      	sub	sp, #28
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	021a      	lsls	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	431a      	orrs	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	609a      	str	r2, [r3, #8]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	401a      	ands	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e046      	b.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d009      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a10      	ldr	r2, [pc, #64]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d10c      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	4313      	orrs	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800

08005288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e03f      	b.n	800533e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fd fd34 	bl	8002d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	; 0x24
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fba9 	bl	8005a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b20      	cmp	r3, #32
 800535e:	d11d      	bne.n	800539c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_UART_Receive_IT+0x26>
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e016      	b.n	800539e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_UART_Receive_IT+0x38>
 800537a:	2302      	movs	r3, #2
 800537c:	e00f      	b.n	800539e <HAL_UART_Receive_IT+0x58>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	461a      	mov	r2, r3
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f9cf 	bl	8005736 <UART_Start_Receive_IT>
 8005398:	4603      	mov	r3, r0
 800539a:	e000      	b.n	800539e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_UART_IRQHandler+0x52>
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fa7f 	bl	80058f6 <UART_Receive_IT>
      return;
 80053f8:	e17b      	b.n	80056f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80b1 	beq.w	8005564 <HAL_UART_IRQHandler+0x1bc>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <HAL_UART_IRQHandler+0x70>
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a6 	beq.w	8005564 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_UART_IRQHandler+0x90>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_UART_IRQHandler+0xb0>
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f043 0202 	orr.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_UART_IRQHandler+0xd0>
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	f043 0204 	orr.w	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00f      	beq.n	80054a2 <HAL_UART_IRQHandler+0xfa>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <HAL_UART_IRQHandler+0xee>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 811e 	beq.w	80056e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_UART_IRQHandler+0x11e>
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa18 	bl	80058f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_UART_IRQHandler+0x146>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d031      	beq.n	8005552 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f95a 	bl	80057a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d023      	beq.n	800554a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005510:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	2b00      	cmp	r3, #0
 8005518:	d013      	beq.n	8005542 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	4a76      	ldr	r2, [pc, #472]	; (80056f8 <HAL_UART_IRQHandler+0x350>)
 8005520:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd fe92 	bl	8003250 <HAL_DMA_Abort_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800553c:	4610      	mov	r0, r2
 800553e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	e00e      	b.n	8005560 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f8e3 	bl	800570e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	e00a      	b.n	8005560 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8df 	bl	800570e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	e006      	b.n	8005560 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8db 	bl	800570e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800555e:	e0c3      	b.n	80056e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	bf00      	nop
    return;
 8005562:	e0c1      	b.n	80056e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	f040 80a1 	bne.w	80056b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 809b 	beq.w	80056b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8095 	beq.w	80056b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d04e      	beq.n	8005648 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80055b4:	8a3b      	ldrh	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8098 	beq.w	80056ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055c0:	8a3a      	ldrh	r2, [r7, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	f080 8092 	bcs.w	80056ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8a3a      	ldrh	r2, [r7, #16]
 80055cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d02b      	beq.n	8005630 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005606:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0210 	bic.w	r2, r2, #16
 8005624:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd fdd5 	bl	80031da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	b29b      	uxth	r3, r3
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f86d 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005646:	e051      	b.n	80056ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005650:	b29b      	uxth	r3, r3
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d047      	beq.n	80056f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005660:	8a7b      	ldrh	r3, [r7, #18]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d044      	beq.n	80056f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005674:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0210 	bic.w	r2, r2, #16
 80056a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a4:	8a7b      	ldrh	r3, [r7, #18]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f839 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056ae:	e01f      	b.n	80056f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_UART_IRQHandler+0x324>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8af 	bl	8005828 <UART_Transmit_IT>
    return;
 80056ca:	e012      	b.n	80056f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <HAL_UART_IRQHandler+0x34a>
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8f0 	bl	80058c6 <UART_EndTransmit_IT>
    return;
 80056e6:	e004      	b.n	80056f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80056e8:	bf00      	nop
 80056ea:	e002      	b.n	80056f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80056ec:	bf00      	nop
 80056ee:	e000      	b.n	80056f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80056f0:	bf00      	nop
  }
}
 80056f2:	3728      	adds	r7, #40	; 0x28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	08005801 	.word	0x08005801

080056fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr

08005736 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	4613      	mov	r3, r2
 8005742:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2222      	movs	r2, #34	; 0x22
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0220 	orr.w	r2, r2, #32
 800579a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0210 	bic.w	r2, r2, #16
 80057e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff ff77 	bl	800570e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b21      	cmp	r3, #33	; 0x21
 800583a:	d13e      	bne.n	80058ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005844:	d114      	bne.n	8005870 <UART_Transmit_IT+0x48>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d110      	bne.n	8005870 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005862:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	621a      	str	r2, [r3, #32]
 800586e:	e008      	b.n	8005882 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	1c59      	adds	r1, r3, #1
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6211      	str	r1, [r2, #32]
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4619      	mov	r1, r3
 8005890:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff ff08 	bl	80056fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b22      	cmp	r3, #34	; 0x22
 8005908:	f040 8099 	bne.w	8005a3e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d117      	bne.n	8005946 <UART_Receive_IT+0x50>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d113      	bne.n	8005946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005934:	b29a      	uxth	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
 8005944:	e026      	b.n	8005994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005958:	d007      	beq.n	800596a <UART_Receive_IT+0x74>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <UART_Receive_IT+0x82>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	e008      	b.n	800598a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005984:	b2da      	uxtb	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4619      	mov	r1, r3
 80059a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d148      	bne.n	8005a3a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0220 	bic.w	r2, r2, #32
 80059b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d123      	bne.n	8005a30 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0210 	bic.w	r2, r2, #16
 80059fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d10a      	bne.n	8005a22 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff fe79 	bl	8005720 <HAL_UARTEx_RxEventCallback>
 8005a2e:	e002      	b.n	8005a36 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fc f8a3 	bl	8001b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e002      	b.n	8005a40 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a82:	f023 030c 	bic.w	r3, r3, #12
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <UART_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ab0:	f7fe fb3c 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	e002      	b.n	8005abe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fe fb24 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8005abc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009a      	lsls	r2, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <UART_SetConfig+0x118>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	0119      	lsls	r1, r3, #4
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009a      	lsls	r2, r3, #2
 8005ae8:	441a      	add	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af4:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <UART_SetConfig+0x118>)
 8005af6:	fba3 0302 	umull	r0, r3, r3, r2
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2064      	movs	r0, #100	; 0x64
 8005afe:	fb00 f303 	mul.w	r3, r0, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	3332      	adds	r3, #50	; 0x32
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <UART_SetConfig+0x118>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b14:	4419      	add	r1, r3
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009a      	lsls	r2, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <UART_SetConfig+0x118>)
 8005b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2064      	movs	r0, #100	; 0x64
 8005b36:	fb00 f303 	mul.w	r3, r0, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a07      	ldr	r2, [pc, #28]	; (8005b60 <UART_SetConfig+0x118>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f003 020f 	and.w	r2, r3, #15
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	440a      	add	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	51eb851f 	.word	0x51eb851f

08005b64 <__errno>:
 8005b64:	4b01      	ldr	r3, [pc, #4]	; (8005b6c <__errno+0x8>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000040 	.word	0x20000040

08005b70 <__libc_init_array>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	2600      	movs	r6, #0
 8005b74:	4d0c      	ldr	r5, [pc, #48]	; (8005ba8 <__libc_init_array+0x38>)
 8005b76:	4c0d      	ldr	r4, [pc, #52]	; (8005bac <__libc_init_array+0x3c>)
 8005b78:	1b64      	subs	r4, r4, r5
 8005b7a:	10a4      	asrs	r4, r4, #2
 8005b7c:	42a6      	cmp	r6, r4
 8005b7e:	d109      	bne.n	8005b94 <__libc_init_array+0x24>
 8005b80:	f000 ff04 	bl	800698c <_init>
 8005b84:	2600      	movs	r6, #0
 8005b86:	4d0a      	ldr	r5, [pc, #40]	; (8005bb0 <__libc_init_array+0x40>)
 8005b88:	4c0a      	ldr	r4, [pc, #40]	; (8005bb4 <__libc_init_array+0x44>)
 8005b8a:	1b64      	subs	r4, r4, r5
 8005b8c:	10a4      	asrs	r4, r4, #2
 8005b8e:	42a6      	cmp	r6, r4
 8005b90:	d105      	bne.n	8005b9e <__libc_init_array+0x2e>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b98:	4798      	blx	r3
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7ee      	b.n	8005b7c <__libc_init_array+0xc>
 8005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba2:	4798      	blx	r3
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	e7f2      	b.n	8005b8e <__libc_init_array+0x1e>
 8005ba8:	08007218 	.word	0x08007218
 8005bac:	08007218 	.word	0x08007218
 8005bb0:	08007218 	.word	0x08007218
 8005bb4:	0800721c 	.word	0x0800721c

08005bb8 <memset>:
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4402      	add	r2, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <pow>:
 8005bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	4689      	mov	r9, r1
 8005bd4:	f000 f860 	bl	8005c98 <__ieee754_pow>
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	462b      	mov	r3, r5
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa ff0a 	bl	80009fc <__aeabi_dcmpun>
 8005be8:	bbc8      	cbnz	r0, 8005c5e <pow+0x96>
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fed1 	bl	8000998 <__aeabi_dcmpeq>
 8005bf6:	b1b8      	cbz	r0, 8005c28 <pow+0x60>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f7fa feca 	bl	8000998 <__aeabi_dcmpeq>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d141      	bne.n	8005c8c <pow+0xc4>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f000 fe39 	bl	8006882 <finite>
 8005c10:	b328      	cbz	r0, 8005c5e <pow+0x96>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fec7 	bl	80009ac <__aeabi_dcmplt>
 8005c1e:	b1f0      	cbz	r0, 8005c5e <pow+0x96>
 8005c20:	f7ff ffa0 	bl	8005b64 <__errno>
 8005c24:	2322      	movs	r3, #34	; 0x22
 8005c26:	e019      	b.n	8005c5c <pow+0x94>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f000 fe29 	bl	8006882 <finite>
 8005c30:	b9c8      	cbnz	r0, 8005c66 <pow+0x9e>
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f000 fe24 	bl	8006882 <finite>
 8005c3a:	b1a0      	cbz	r0, 8005c66 <pow+0x9e>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f000 fe1f 	bl	8006882 <finite>
 8005c44:	b178      	cbz	r0, 8005c66 <pow+0x9e>
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa fed5 	bl	80009fc <__aeabi_dcmpun>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0e4      	beq.n	8005c20 <pow+0x58>
 8005c56:	f7ff ff85 	bl	8005b64 <__errno>
 8005c5a:	2321      	movs	r3, #33	; 0x21
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa fe93 	bl	8000998 <__aeabi_dcmpeq>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0f3      	beq.n	8005c5e <pow+0x96>
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f000 fe02 	bl	8006882 <finite>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0ed      	beq.n	8005c5e <pow+0x96>
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f000 fdfc 	bl	8006882 <finite>
 8005c8a:	e7c8      	b.n	8005c1e <pow+0x56>
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	4f01      	ldr	r7, [pc, #4]	; (8005c94 <pow+0xcc>)
 8005c90:	e7e5      	b.n	8005c5e <pow+0x96>
 8005c92:	bf00      	nop
 8005c94:	3ff00000 	.word	0x3ff00000

08005c98 <__ieee754_pow>:
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	b093      	sub	sp, #76	; 0x4c
 8005c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ca2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005ca6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005caa:	4689      	mov	r9, r1
 8005cac:	ea56 0102 	orrs.w	r1, r6, r2
 8005cb0:	4680      	mov	r8, r0
 8005cb2:	d111      	bne.n	8005cd8 <__ieee754_pow+0x40>
 8005cb4:	1803      	adds	r3, r0, r0
 8005cb6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005cba:	4152      	adcs	r2, r2
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <__ieee754_pow+0x230>)
 8005cc0:	4193      	sbcs	r3, r2
 8005cc2:	f080 84b9 	bcs.w	8006638 <__ieee754_pow+0x9a0>
 8005cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fa45 	bl	800015c <__adddf3>
 8005cd2:	4683      	mov	fp, r0
 8005cd4:	468c      	mov	ip, r1
 8005cd6:	e06f      	b.n	8005db8 <__ieee754_pow+0x120>
 8005cd8:	4b7c      	ldr	r3, [pc, #496]	; (8005ecc <__ieee754_pow+0x234>)
 8005cda:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005cde:	429c      	cmp	r4, r3
 8005ce0:	464d      	mov	r5, r9
 8005ce2:	4682      	mov	sl, r0
 8005ce4:	dc06      	bgt.n	8005cf4 <__ieee754_pow+0x5c>
 8005ce6:	d101      	bne.n	8005cec <__ieee754_pow+0x54>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d1ec      	bne.n	8005cc6 <__ieee754_pow+0x2e>
 8005cec:	429e      	cmp	r6, r3
 8005cee:	dc01      	bgt.n	8005cf4 <__ieee754_pow+0x5c>
 8005cf0:	d10f      	bne.n	8005d12 <__ieee754_pow+0x7a>
 8005cf2:	b172      	cbz	r2, 8005d12 <__ieee754_pow+0x7a>
 8005cf4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005cf8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005cfc:	ea55 050a 	orrs.w	r5, r5, sl
 8005d00:	d1e1      	bne.n	8005cc6 <__ieee754_pow+0x2e>
 8005d02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005d06:	18db      	adds	r3, r3, r3
 8005d08:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005d0c:	4152      	adcs	r2, r2
 8005d0e:	429d      	cmp	r5, r3
 8005d10:	e7d5      	b.n	8005cbe <__ieee754_pow+0x26>
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	da39      	bge.n	8005d8a <__ieee754_pow+0xf2>
 8005d16:	4b6e      	ldr	r3, [pc, #440]	; (8005ed0 <__ieee754_pow+0x238>)
 8005d18:	429e      	cmp	r6, r3
 8005d1a:	dc52      	bgt.n	8005dc2 <__ieee754_pow+0x12a>
 8005d1c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005d20:	429e      	cmp	r6, r3
 8005d22:	f340 849c 	ble.w	800665e <__ieee754_pow+0x9c6>
 8005d26:	1533      	asrs	r3, r6, #20
 8005d28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d2c:	2b14      	cmp	r3, #20
 8005d2e:	dd0f      	ble.n	8005d50 <__ieee754_pow+0xb8>
 8005d30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005d34:	fa22 f103 	lsr.w	r1, r2, r3
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	f040 848e 	bne.w	800665e <__ieee754_pow+0x9c6>
 8005d42:	f001 0101 	and.w	r1, r1, #1
 8005d46:	f1c1 0302 	rsb	r3, r1, #2
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	b182      	cbz	r2, 8005d70 <__ieee754_pow+0xd8>
 8005d4e:	e05d      	b.n	8005e0c <__ieee754_pow+0x174>
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d159      	bne.n	8005e08 <__ieee754_pow+0x170>
 8005d54:	f1c3 0314 	rsb	r3, r3, #20
 8005d58:	fa46 f103 	asr.w	r1, r6, r3
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	42b3      	cmp	r3, r6
 8005d62:	f040 8479 	bne.w	8006658 <__ieee754_pow+0x9c0>
 8005d66:	f001 0101 	and.w	r1, r1, #1
 8005d6a:	f1c1 0302 	rsb	r3, r1, #2
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	4b58      	ldr	r3, [pc, #352]	; (8005ed4 <__ieee754_pow+0x23c>)
 8005d72:	429e      	cmp	r6, r3
 8005d74:	d132      	bne.n	8005ddc <__ieee754_pow+0x144>
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	f280 846a 	bge.w	8006650 <__ieee754_pow+0x9b8>
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	2000      	movs	r0, #0
 8005d82:	4954      	ldr	r1, [pc, #336]	; (8005ed4 <__ieee754_pow+0x23c>)
 8005d84:	f7fa fcca 	bl	800071c <__aeabi_ddiv>
 8005d88:	e7a3      	b.n	8005cd2 <__ieee754_pow+0x3a>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d13c      	bne.n	8005e0c <__ieee754_pow+0x174>
 8005d92:	4b4e      	ldr	r3, [pc, #312]	; (8005ecc <__ieee754_pow+0x234>)
 8005d94:	429e      	cmp	r6, r3
 8005d96:	d1eb      	bne.n	8005d70 <__ieee754_pow+0xd8>
 8005d98:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005d9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005da0:	ea53 030a 	orrs.w	r3, r3, sl
 8005da4:	f000 8448 	beq.w	8006638 <__ieee754_pow+0x9a0>
 8005da8:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <__ieee754_pow+0x240>)
 8005daa:	429c      	cmp	r4, r3
 8005dac:	dd0b      	ble.n	8005dc6 <__ieee754_pow+0x12e>
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	f2c0 8448 	blt.w	8006644 <__ieee754_pow+0x9ac>
 8005db4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005db8:	4658      	mov	r0, fp
 8005dba:	4661      	mov	r1, ip
 8005dbc:	b013      	add	sp, #76	; 0x4c
 8005dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e7e2      	b.n	8005d8c <__ieee754_pow+0xf4>
 8005dc6:	2f00      	cmp	r7, #0
 8005dc8:	f04f 0b00 	mov.w	fp, #0
 8005dcc:	f04f 0c00 	mov.w	ip, #0
 8005dd0:	daf2      	bge.n	8005db8 <__ieee754_pow+0x120>
 8005dd2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005dd6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005dda:	e7ed      	b.n	8005db8 <__ieee754_pow+0x120>
 8005ddc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005de0:	d106      	bne.n	8005df0 <__ieee754_pow+0x158>
 8005de2:	4642      	mov	r2, r8
 8005de4:	464b      	mov	r3, r9
 8005de6:	4640      	mov	r0, r8
 8005de8:	4649      	mov	r1, r9
 8005dea:	f7fa fb6d 	bl	80004c8 <__aeabi_dmul>
 8005dee:	e770      	b.n	8005cd2 <__ieee754_pow+0x3a>
 8005df0:	4b3a      	ldr	r3, [pc, #232]	; (8005edc <__ieee754_pow+0x244>)
 8005df2:	429f      	cmp	r7, r3
 8005df4:	d10a      	bne.n	8005e0c <__ieee754_pow+0x174>
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	db08      	blt.n	8005e0c <__ieee754_pow+0x174>
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	b013      	add	sp, #76	; 0x4c
 8005e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	f000 bc5e 	b.w	80066c4 <__ieee754_sqrt>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f000 fd34 	bl	800687c <fabs>
 8005e14:	4683      	mov	fp, r0
 8005e16:	468c      	mov	ip, r1
 8005e18:	f1ba 0f00 	cmp.w	sl, #0
 8005e1c:	d128      	bne.n	8005e70 <__ieee754_pow+0x1d8>
 8005e1e:	b124      	cbz	r4, 8005e2a <__ieee754_pow+0x192>
 8005e20:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <__ieee754_pow+0x23c>)
 8005e22:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d122      	bne.n	8005e70 <__ieee754_pow+0x1d8>
 8005e2a:	2f00      	cmp	r7, #0
 8005e2c:	da07      	bge.n	8005e3e <__ieee754_pow+0x1a6>
 8005e2e:	465a      	mov	r2, fp
 8005e30:	4663      	mov	r3, ip
 8005e32:	2000      	movs	r0, #0
 8005e34:	4927      	ldr	r1, [pc, #156]	; (8005ed4 <__ieee754_pow+0x23c>)
 8005e36:	f7fa fc71 	bl	800071c <__aeabi_ddiv>
 8005e3a:	4683      	mov	fp, r0
 8005e3c:	468c      	mov	ip, r1
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	daba      	bge.n	8005db8 <__ieee754_pow+0x120>
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e4c:	4323      	orrs	r3, r4
 8005e4e:	d108      	bne.n	8005e62 <__ieee754_pow+0x1ca>
 8005e50:	465a      	mov	r2, fp
 8005e52:	4663      	mov	r3, ip
 8005e54:	4658      	mov	r0, fp
 8005e56:	4661      	mov	r1, ip
 8005e58:	f7fa f97e 	bl	8000158 <__aeabi_dsub>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	e790      	b.n	8005d84 <__ieee754_pow+0xec>
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d1a7      	bne.n	8005db8 <__ieee754_pow+0x120>
 8005e68:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005e6c:	469c      	mov	ip, r3
 8005e6e:	e7a3      	b.n	8005db8 <__ieee754_pow+0x120>
 8005e70:	0feb      	lsrs	r3, r5, #31
 8005e72:	3b01      	subs	r3, #1
 8005e74:	930c      	str	r3, [sp, #48]	; 0x30
 8005e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e78:	9b00      	ldr	r3, [sp, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	d104      	bne.n	8005e88 <__ieee754_pow+0x1f0>
 8005e7e:	4642      	mov	r2, r8
 8005e80:	464b      	mov	r3, r9
 8005e82:	4640      	mov	r0, r8
 8005e84:	4649      	mov	r1, r9
 8005e86:	e7e7      	b.n	8005e58 <__ieee754_pow+0x1c0>
 8005e88:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <__ieee754_pow+0x248>)
 8005e8a:	429e      	cmp	r6, r3
 8005e8c:	f340 80f6 	ble.w	800607c <__ieee754_pow+0x3e4>
 8005e90:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005e94:	429e      	cmp	r6, r3
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <__ieee754_pow+0x240>)
 8005e98:	dd09      	ble.n	8005eae <__ieee754_pow+0x216>
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	dc0c      	bgt.n	8005eb8 <__ieee754_pow+0x220>
 8005e9e:	2f00      	cmp	r7, #0
 8005ea0:	da0c      	bge.n	8005ebc <__ieee754_pow+0x224>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	b013      	add	sp, #76	; 0x4c
 8005ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eaa:	f000 bce2 	b.w	8006872 <__math_oflow>
 8005eae:	429c      	cmp	r4, r3
 8005eb0:	dbf5      	blt.n	8005e9e <__ieee754_pow+0x206>
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <__ieee754_pow+0x23c>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	dd15      	ble.n	8005ee4 <__ieee754_pow+0x24c>
 8005eb8:	2f00      	cmp	r7, #0
 8005eba:	dcf2      	bgt.n	8005ea2 <__ieee754_pow+0x20a>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	b013      	add	sp, #76	; 0x4c
 8005ec0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	f000 bcd0 	b.w	8006868 <__math_uflow>
 8005ec8:	fff00000 	.word	0xfff00000
 8005ecc:	7ff00000 	.word	0x7ff00000
 8005ed0:	433fffff 	.word	0x433fffff
 8005ed4:	3ff00000 	.word	0x3ff00000
 8005ed8:	3fefffff 	.word	0x3fefffff
 8005edc:	3fe00000 	.word	0x3fe00000
 8005ee0:	41e00000 	.word	0x41e00000
 8005ee4:	4661      	mov	r1, ip
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4658      	mov	r0, fp
 8005eea:	4b5f      	ldr	r3, [pc, #380]	; (8006068 <__ieee754_pow+0x3d0>)
 8005eec:	f7fa f934 	bl	8000158 <__aeabi_dsub>
 8005ef0:	a355      	add	r3, pc, #340	; (adr r3, 8006048 <__ieee754_pow+0x3b0>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	f7fa fae5 	bl	80004c8 <__aeabi_dmul>
 8005efe:	a354      	add	r3, pc, #336	; (adr r3, 8006050 <__ieee754_pow+0x3b8>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	4606      	mov	r6, r0
 8005f06:	460f      	mov	r7, r1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa fadc 	bl	80004c8 <__aeabi_dmul>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4682      	mov	sl, r0
 8005f14:	468b      	mov	fp, r1
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4b54      	ldr	r3, [pc, #336]	; (800606c <__ieee754_pow+0x3d4>)
 8005f1c:	f7fa fad4 	bl	80004c8 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	a14c      	add	r1, pc, #304	; (adr r1, 8006058 <__ieee754_pow+0x3c0>)
 8005f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f2a:	f7fa f915 	bl	8000158 <__aeabi_dsub>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	f7fa fac9 	bl	80004c8 <__aeabi_dmul>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	494c      	ldr	r1, [pc, #304]	; (8006070 <__ieee754_pow+0x3d8>)
 8005f3e:	f7fa f90b 	bl	8000158 <__aeabi_dsub>
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	4680      	mov	r8, r0
 8005f48:	4689      	mov	r9, r1
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7fa fabb 	bl	80004c8 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	f7fa fab5 	bl	80004c8 <__aeabi_dmul>
 8005f5e:	a340      	add	r3, pc, #256	; (adr r3, 8006060 <__ieee754_pow+0x3c8>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa fab0 	bl	80004c8 <__aeabi_dmul>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	4659      	mov	r1, fp
 8005f70:	f7fa f8f2 	bl	8000158 <__aeabi_dsub>
 8005f74:	f04f 0a00 	mov.w	sl, #0
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460d      	mov	r5, r1
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa f8ea 	bl	800015c <__adddf3>
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	468b      	mov	fp, r1
 8005f90:	f7fa f8e2 	bl	8000158 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7fa f8dc 	bl	8000158 <__aeabi_dsub>
 8005fa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fa4:	9b00      	ldr	r3, [sp, #0]
 8005fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f04f 0600 	mov.w	r6, #0
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	bf0c      	ite	eq
 8005fb6:	4b2f      	ldreq	r3, [pc, #188]	; (8006074 <__ieee754_pow+0x3dc>)
 8005fb8:	4b2b      	ldrne	r3, [pc, #172]	; (8006068 <__ieee754_pow+0x3d0>)
 8005fba:	4604      	mov	r4, r0
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc2:	e9cd 2300 	strd	r2, r3, [sp]
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	463b      	mov	r3, r7
 8005fca:	f7fa f8c5 	bl	8000158 <__aeabi_dsub>
 8005fce:	4652      	mov	r2, sl
 8005fd0:	465b      	mov	r3, fp
 8005fd2:	f7fa fa79 	bl	80004c8 <__aeabi_dmul>
 8005fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fa71 	bl	80004c8 <__aeabi_dmul>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4640      	mov	r0, r8
 8005fec:	4649      	mov	r1, r9
 8005fee:	f7fa f8b5 	bl	800015c <__adddf3>
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	4650      	mov	r0, sl
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	f7fa fa63 	bl	80004c8 <__aeabi_dmul>
 8006002:	4604      	mov	r4, r0
 8006004:	460d      	mov	r5, r1
 8006006:	460b      	mov	r3, r1
 8006008:	4602      	mov	r2, r0
 800600a:	4649      	mov	r1, r9
 800600c:	4640      	mov	r0, r8
 800600e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006012:	f7fa f8a3 	bl	800015c <__adddf3>
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <__ieee754_pow+0x3e0>)
 8006018:	4682      	mov	sl, r0
 800601a:	4299      	cmp	r1, r3
 800601c:	460f      	mov	r7, r1
 800601e:	460e      	mov	r6, r1
 8006020:	f340 82e5 	ble.w	80065ee <__ieee754_pow+0x956>
 8006024:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006028:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800602c:	4303      	orrs	r3, r0
 800602e:	f000 81df 	beq.w	80063f0 <__ieee754_pow+0x758>
 8006032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006036:	2200      	movs	r2, #0
 8006038:	2300      	movs	r3, #0
 800603a:	f7fa fcb7 	bl	80009ac <__aeabi_dcmplt>
 800603e:	3800      	subs	r0, #0
 8006040:	bf18      	it	ne
 8006042:	2001      	movne	r0, #1
 8006044:	e72e      	b.n	8005ea4 <__ieee754_pow+0x20c>
 8006046:	bf00      	nop
 8006048:	60000000 	.word	0x60000000
 800604c:	3ff71547 	.word	0x3ff71547
 8006050:	f85ddf44 	.word	0xf85ddf44
 8006054:	3e54ae0b 	.word	0x3e54ae0b
 8006058:	55555555 	.word	0x55555555
 800605c:	3fd55555 	.word	0x3fd55555
 8006060:	652b82fe 	.word	0x652b82fe
 8006064:	3ff71547 	.word	0x3ff71547
 8006068:	3ff00000 	.word	0x3ff00000
 800606c:	3fd00000 	.word	0x3fd00000
 8006070:	3fe00000 	.word	0x3fe00000
 8006074:	bff00000 	.word	0xbff00000
 8006078:	408fffff 	.word	0x408fffff
 800607c:	4bd2      	ldr	r3, [pc, #840]	; (80063c8 <__ieee754_pow+0x730>)
 800607e:	2200      	movs	r2, #0
 8006080:	402b      	ands	r3, r5
 8006082:	b943      	cbnz	r3, 8006096 <__ieee754_pow+0x3fe>
 8006084:	4658      	mov	r0, fp
 8006086:	4661      	mov	r1, ip
 8006088:	4bd0      	ldr	r3, [pc, #832]	; (80063cc <__ieee754_pow+0x734>)
 800608a:	f7fa fa1d 	bl	80004c8 <__aeabi_dmul>
 800608e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006092:	4683      	mov	fp, r0
 8006094:	460c      	mov	r4, r1
 8006096:	1523      	asrs	r3, r4, #20
 8006098:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800609c:	4413      	add	r3, r2
 800609e:	930b      	str	r3, [sp, #44]	; 0x2c
 80060a0:	4bcb      	ldr	r3, [pc, #812]	; (80063d0 <__ieee754_pow+0x738>)
 80060a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80060a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80060aa:	429c      	cmp	r4, r3
 80060ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80060b0:	dd08      	ble.n	80060c4 <__ieee754_pow+0x42c>
 80060b2:	4bc8      	ldr	r3, [pc, #800]	; (80063d4 <__ieee754_pow+0x73c>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	f340 8199 	ble.w	80063ec <__ieee754_pow+0x754>
 80060ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060bc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80060c0:	3301      	adds	r3, #1
 80060c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80060c4:	2600      	movs	r6, #0
 80060c6:	00f3      	lsls	r3, r6, #3
 80060c8:	930d      	str	r3, [sp, #52]	; 0x34
 80060ca:	4bc3      	ldr	r3, [pc, #780]	; (80063d8 <__ieee754_pow+0x740>)
 80060cc:	4658      	mov	r0, fp
 80060ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060d6:	4629      	mov	r1, r5
 80060d8:	461a      	mov	r2, r3
 80060da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80060de:	4623      	mov	r3, r4
 80060e0:	f7fa f83a 	bl	8000158 <__aeabi_dsub>
 80060e4:	46da      	mov	sl, fp
 80060e6:	462b      	mov	r3, r5
 80060e8:	4652      	mov	r2, sl
 80060ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80060ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060f2:	f7fa f833 	bl	800015c <__adddf3>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	2000      	movs	r0, #0
 80060fc:	49b7      	ldr	r1, [pc, #732]	; (80063dc <__ieee754_pow+0x744>)
 80060fe:	f7fa fb0d 	bl	800071c <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800610a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800610e:	f7fa f9db 	bl	80004c8 <__aeabi_dmul>
 8006112:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006116:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800611a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800611e:	2300      	movs	r3, #0
 8006120:	2200      	movs	r2, #0
 8006122:	46ab      	mov	fp, r5
 8006124:	106d      	asrs	r5, r5, #1
 8006126:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006130:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006134:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006138:	4640      	mov	r0, r8
 800613a:	4649      	mov	r1, r9
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	f7fa f9c2 	bl	80004c8 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800614c:	f7fa f804 	bl	8000158 <__aeabi_dsub>
 8006150:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006154:	4606      	mov	r6, r0
 8006156:	460f      	mov	r7, r1
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	f7f9 fffc 	bl	8000158 <__aeabi_dsub>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4650      	mov	r0, sl
 8006166:	4659      	mov	r1, fp
 8006168:	f7f9 fff6 	bl	8000158 <__aeabi_dsub>
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	f7fa f9aa 	bl	80004c8 <__aeabi_dmul>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f7f9 ffec 	bl	8000158 <__aeabi_dsub>
 8006180:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006184:	f7fa f9a0 	bl	80004c8 <__aeabi_dmul>
 8006188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800618c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006190:	4610      	mov	r0, r2
 8006192:	4619      	mov	r1, r3
 8006194:	f7fa f998 	bl	80004c8 <__aeabi_dmul>
 8006198:	a379      	add	r3, pc, #484	; (adr r3, 8006380 <__ieee754_pow+0x6e8>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	4604      	mov	r4, r0
 80061a0:	460d      	mov	r5, r1
 80061a2:	f7fa f991 	bl	80004c8 <__aeabi_dmul>
 80061a6:	a378      	add	r3, pc, #480	; (adr r3, 8006388 <__ieee754_pow+0x6f0>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7f9 ffd6 	bl	800015c <__adddf3>
 80061b0:	4622      	mov	r2, r4
 80061b2:	462b      	mov	r3, r5
 80061b4:	f7fa f988 	bl	80004c8 <__aeabi_dmul>
 80061b8:	a375      	add	r3, pc, #468	; (adr r3, 8006390 <__ieee754_pow+0x6f8>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7f9 ffcd 	bl	800015c <__adddf3>
 80061c2:	4622      	mov	r2, r4
 80061c4:	462b      	mov	r3, r5
 80061c6:	f7fa f97f 	bl	80004c8 <__aeabi_dmul>
 80061ca:	a373      	add	r3, pc, #460	; (adr r3, 8006398 <__ieee754_pow+0x700>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7f9 ffc4 	bl	800015c <__adddf3>
 80061d4:	4622      	mov	r2, r4
 80061d6:	462b      	mov	r3, r5
 80061d8:	f7fa f976 	bl	80004c8 <__aeabi_dmul>
 80061dc:	a370      	add	r3, pc, #448	; (adr r3, 80063a0 <__ieee754_pow+0x708>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7f9 ffbb 	bl	800015c <__adddf3>
 80061e6:	4622      	mov	r2, r4
 80061e8:	462b      	mov	r3, r5
 80061ea:	f7fa f96d 	bl	80004c8 <__aeabi_dmul>
 80061ee:	a36e      	add	r3, pc, #440	; (adr r3, 80063a8 <__ieee754_pow+0x710>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7f9 ffb2 	bl	800015c <__adddf3>
 80061f8:	4622      	mov	r2, r4
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
 80061fe:	462b      	mov	r3, r5
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7fa f960 	bl	80004c8 <__aeabi_dmul>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4630      	mov	r0, r6
 800620e:	4639      	mov	r1, r7
 8006210:	f7fa f95a 	bl	80004c8 <__aeabi_dmul>
 8006214:	4604      	mov	r4, r0
 8006216:	460d      	mov	r5, r1
 8006218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	f7f9 ff9c 	bl	800015c <__adddf3>
 8006224:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006228:	f7fa f94e 	bl	80004c8 <__aeabi_dmul>
 800622c:	4622      	mov	r2, r4
 800622e:	462b      	mov	r3, r5
 8006230:	f7f9 ff94 	bl	800015c <__adddf3>
 8006234:	4642      	mov	r2, r8
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
 800623a:	464b      	mov	r3, r9
 800623c:	4640      	mov	r0, r8
 800623e:	4649      	mov	r1, r9
 8006240:	f7fa f942 	bl	80004c8 <__aeabi_dmul>
 8006244:	2200      	movs	r2, #0
 8006246:	4b66      	ldr	r3, [pc, #408]	; (80063e0 <__ieee754_pow+0x748>)
 8006248:	4682      	mov	sl, r0
 800624a:	468b      	mov	fp, r1
 800624c:	f7f9 ff86 	bl	800015c <__adddf3>
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	f7f9 ff82 	bl	800015c <__adddf3>
 8006258:	2400      	movs	r4, #0
 800625a:	460d      	mov	r5, r1
 800625c:	4622      	mov	r2, r4
 800625e:	460b      	mov	r3, r1
 8006260:	4640      	mov	r0, r8
 8006262:	4649      	mov	r1, r9
 8006264:	f7fa f930 	bl	80004c8 <__aeabi_dmul>
 8006268:	2200      	movs	r2, #0
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <__ieee754_pow+0x748>)
 8006274:	f7f9 ff70 	bl	8000158 <__aeabi_dsub>
 8006278:	4652      	mov	r2, sl
 800627a:	465b      	mov	r3, fp
 800627c:	f7f9 ff6c 	bl	8000158 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4630      	mov	r0, r6
 8006286:	4639      	mov	r1, r7
 8006288:	f7f9 ff66 	bl	8000158 <__aeabi_dsub>
 800628c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006290:	f7fa f91a 	bl	80004c8 <__aeabi_dmul>
 8006294:	4622      	mov	r2, r4
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800629e:	462b      	mov	r3, r5
 80062a0:	f7fa f912 	bl	80004c8 <__aeabi_dmul>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f7f9 ff56 	bl	800015c <__adddf3>
 80062b0:	2400      	movs	r4, #0
 80062b2:	4606      	mov	r6, r0
 80062b4:	460f      	mov	r7, r1
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	f7f9 ff4d 	bl	800015c <__adddf3>
 80062c2:	a33b      	add	r3, pc, #236	; (adr r3, 80063b0 <__ieee754_pow+0x718>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	4620      	mov	r0, r4
 80062ca:	460d      	mov	r5, r1
 80062cc:	f7fa f8fc 	bl	80004c8 <__aeabi_dmul>
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062d8:	4620      	mov	r0, r4
 80062da:	4629      	mov	r1, r5
 80062dc:	f7f9 ff3c 	bl	8000158 <__aeabi_dsub>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7f9 ff36 	bl	8000158 <__aeabi_dsub>
 80062ec:	a332      	add	r3, pc, #200	; (adr r3, 80063b8 <__ieee754_pow+0x720>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7fa f8e9 	bl	80004c8 <__aeabi_dmul>
 80062f6:	a332      	add	r3, pc, #200	; (adr r3, 80063c0 <__ieee754_pow+0x728>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	4620      	mov	r0, r4
 8006302:	4629      	mov	r1, r5
 8006304:	f7fa f8e0 	bl	80004c8 <__aeabi_dmul>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7f9 ff24 	bl	800015c <__adddf3>
 8006314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006316:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <__ieee754_pow+0x74c>)
 8006318:	f04f 0a00 	mov.w	sl, #0
 800631c:	4413      	add	r3, r2
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ff1b 	bl	800015c <__adddf3>
 8006326:	4680      	mov	r8, r0
 8006328:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800632a:	4689      	mov	r9, r1
 800632c:	f7fa f862 	bl	80003f4 <__aeabi_i2d>
 8006330:	4604      	mov	r4, r0
 8006332:	460d      	mov	r5, r1
 8006334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006336:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <__ieee754_pow+0x750>)
 8006338:	4413      	add	r3, r2
 800633a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800633e:	4642      	mov	r2, r8
 8006340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006344:	464b      	mov	r3, r9
 8006346:	f7f9 ff09 	bl	800015c <__adddf3>
 800634a:	4632      	mov	r2, r6
 800634c:	463b      	mov	r3, r7
 800634e:	f7f9 ff05 	bl	800015c <__adddf3>
 8006352:	4622      	mov	r2, r4
 8006354:	462b      	mov	r3, r5
 8006356:	f7f9 ff01 	bl	800015c <__adddf3>
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	4650      	mov	r0, sl
 8006360:	468b      	mov	fp, r1
 8006362:	f7f9 fef9 	bl	8000158 <__aeabi_dsub>
 8006366:	4632      	mov	r2, r6
 8006368:	463b      	mov	r3, r7
 800636a:	f7f9 fef5 	bl	8000158 <__aeabi_dsub>
 800636e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006372:	f7f9 fef1 	bl	8000158 <__aeabi_dsub>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	e60d      	b.n	8005f9c <__ieee754_pow+0x304>
 8006380:	4a454eef 	.word	0x4a454eef
 8006384:	3fca7e28 	.word	0x3fca7e28
 8006388:	93c9db65 	.word	0x93c9db65
 800638c:	3fcd864a 	.word	0x3fcd864a
 8006390:	a91d4101 	.word	0xa91d4101
 8006394:	3fd17460 	.word	0x3fd17460
 8006398:	518f264d 	.word	0x518f264d
 800639c:	3fd55555 	.word	0x3fd55555
 80063a0:	db6fabff 	.word	0xdb6fabff
 80063a4:	3fdb6db6 	.word	0x3fdb6db6
 80063a8:	33333303 	.word	0x33333303
 80063ac:	3fe33333 	.word	0x3fe33333
 80063b0:	e0000000 	.word	0xe0000000
 80063b4:	3feec709 	.word	0x3feec709
 80063b8:	dc3a03fd 	.word	0xdc3a03fd
 80063bc:	3feec709 	.word	0x3feec709
 80063c0:	145b01f5 	.word	0x145b01f5
 80063c4:	be3e2fe0 	.word	0xbe3e2fe0
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	43400000 	.word	0x43400000
 80063d0:	0003988e 	.word	0x0003988e
 80063d4:	000bb679 	.word	0x000bb679
 80063d8:	080071e8 	.word	0x080071e8
 80063dc:	3ff00000 	.word	0x3ff00000
 80063e0:	40080000 	.word	0x40080000
 80063e4:	08007208 	.word	0x08007208
 80063e8:	080071f8 	.word	0x080071f8
 80063ec:	2601      	movs	r6, #1
 80063ee:	e66a      	b.n	80060c6 <__ieee754_pow+0x42e>
 80063f0:	a39d      	add	r3, pc, #628	; (adr r3, 8006668 <__ieee754_pow+0x9d0>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f7f9 feaf 	bl	800015c <__adddf3>
 80063fe:	4622      	mov	r2, r4
 8006400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006404:	462b      	mov	r3, r5
 8006406:	4650      	mov	r0, sl
 8006408:	4639      	mov	r1, r7
 800640a:	f7f9 fea5 	bl	8000158 <__aeabi_dsub>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006416:	f7fa fae7 	bl	80009e8 <__aeabi_dcmpgt>
 800641a:	2800      	cmp	r0, #0
 800641c:	f47f ae09 	bne.w	8006032 <__ieee754_pow+0x39a>
 8006420:	4aa3      	ldr	r2, [pc, #652]	; (80066b0 <__ieee754_pow+0xa18>)
 8006422:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006426:	4293      	cmp	r3, r2
 8006428:	f340 8101 	ble.w	800662e <__ieee754_pow+0x996>
 800642c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006430:	2000      	movs	r0, #0
 8006432:	151b      	asrs	r3, r3, #20
 8006434:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006438:	fa4a f303 	asr.w	r3, sl, r3
 800643c:	4433      	add	r3, r6
 800643e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006442:	4f9c      	ldr	r7, [pc, #624]	; (80066b4 <__ieee754_pow+0xa1c>)
 8006444:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006448:	4117      	asrs	r7, r2
 800644a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800644e:	ea23 0107 	bic.w	r1, r3, r7
 8006452:	f1c2 0214 	rsb	r2, r2, #20
 8006456:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800645a:	460b      	mov	r3, r1
 800645c:	fa4a fa02 	asr.w	sl, sl, r2
 8006460:	2e00      	cmp	r6, #0
 8006462:	4602      	mov	r2, r0
 8006464:	4629      	mov	r1, r5
 8006466:	4620      	mov	r0, r4
 8006468:	bfb8      	it	lt
 800646a:	f1ca 0a00 	rsblt	sl, sl, #0
 800646e:	f7f9 fe73 	bl	8000158 <__aeabi_dsub>
 8006472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647a:	2400      	movs	r4, #0
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	f7f9 fe6c 	bl	800015c <__adddf3>
 8006484:	a37a      	add	r3, pc, #488	; (adr r3, 8006670 <__ieee754_pow+0x9d8>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	4620      	mov	r0, r4
 800648c:	460d      	mov	r5, r1
 800648e:	f7fa f81b 	bl	80004c8 <__aeabi_dmul>
 8006492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006496:	4606      	mov	r6, r0
 8006498:	460f      	mov	r7, r1
 800649a:	4620      	mov	r0, r4
 800649c:	4629      	mov	r1, r5
 800649e:	f7f9 fe5b 	bl	8000158 <__aeabi_dsub>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	f7f9 fe55 	bl	8000158 <__aeabi_dsub>
 80064ae:	a372      	add	r3, pc, #456	; (adr r3, 8006678 <__ieee754_pow+0x9e0>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7fa f808 	bl	80004c8 <__aeabi_dmul>
 80064b8:	a371      	add	r3, pc, #452	; (adr r3, 8006680 <__ieee754_pow+0x9e8>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	4680      	mov	r8, r0
 80064c0:	4689      	mov	r9, r1
 80064c2:	4620      	mov	r0, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7f9 ffff 	bl	80004c8 <__aeabi_dmul>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	f7f9 fe43 	bl	800015c <__adddf3>
 80064d6:	4604      	mov	r4, r0
 80064d8:	460d      	mov	r5, r1
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fe3b 	bl	800015c <__adddf3>
 80064e6:	4632      	mov	r2, r6
 80064e8:	463b      	mov	r3, r7
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	f7f9 fe33 	bl	8000158 <__aeabi_dsub>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7f9 fe2d 	bl	8000158 <__aeabi_dsub>
 80064fe:	4642      	mov	r2, r8
 8006500:	4606      	mov	r6, r0
 8006502:	460f      	mov	r7, r1
 8006504:	464b      	mov	r3, r9
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7f9 ffdd 	bl	80004c8 <__aeabi_dmul>
 800650e:	a35e      	add	r3, pc, #376	; (adr r3, 8006688 <__ieee754_pow+0x9f0>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	4604      	mov	r4, r0
 8006516:	460d      	mov	r5, r1
 8006518:	f7f9 ffd6 	bl	80004c8 <__aeabi_dmul>
 800651c:	a35c      	add	r3, pc, #368	; (adr r3, 8006690 <__ieee754_pow+0x9f8>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7f9 fe19 	bl	8000158 <__aeabi_dsub>
 8006526:	4622      	mov	r2, r4
 8006528:	462b      	mov	r3, r5
 800652a:	f7f9 ffcd 	bl	80004c8 <__aeabi_dmul>
 800652e:	a35a      	add	r3, pc, #360	; (adr r3, 8006698 <__ieee754_pow+0xa00>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 fe12 	bl	800015c <__adddf3>
 8006538:	4622      	mov	r2, r4
 800653a:	462b      	mov	r3, r5
 800653c:	f7f9 ffc4 	bl	80004c8 <__aeabi_dmul>
 8006540:	a357      	add	r3, pc, #348	; (adr r3, 80066a0 <__ieee754_pow+0xa08>)
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	f7f9 fe07 	bl	8000158 <__aeabi_dsub>
 800654a:	4622      	mov	r2, r4
 800654c:	462b      	mov	r3, r5
 800654e:	f7f9 ffbb 	bl	80004c8 <__aeabi_dmul>
 8006552:	a355      	add	r3, pc, #340	; (adr r3, 80066a8 <__ieee754_pow+0xa10>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7f9 fe00 	bl	800015c <__adddf3>
 800655c:	4622      	mov	r2, r4
 800655e:	462b      	mov	r3, r5
 8006560:	f7f9 ffb2 	bl	80004c8 <__aeabi_dmul>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4640      	mov	r0, r8
 800656a:	4649      	mov	r1, r9
 800656c:	f7f9 fdf4 	bl	8000158 <__aeabi_dsub>
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	f7f9 ffa4 	bl	80004c8 <__aeabi_dmul>
 8006580:	2200      	movs	r2, #0
 8006582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800658a:	4620      	mov	r0, r4
 800658c:	4629      	mov	r1, r5
 800658e:	f7f9 fde3 	bl	8000158 <__aeabi_dsub>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659a:	f7fa f8bf 	bl	800071c <__aeabi_ddiv>
 800659e:	4632      	mov	r2, r6
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	463b      	mov	r3, r7
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7f9 ff8d 	bl	80004c8 <__aeabi_dmul>
 80065ae:	4632      	mov	r2, r6
 80065b0:	463b      	mov	r3, r7
 80065b2:	f7f9 fdd3 	bl	800015c <__adddf3>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7f9 fdcb 	bl	8000158 <__aeabi_dsub>
 80065c2:	4642      	mov	r2, r8
 80065c4:	464b      	mov	r3, r9
 80065c6:	f7f9 fdc7 	bl	8000158 <__aeabi_dsub>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	2000      	movs	r0, #0
 80065d0:	4939      	ldr	r1, [pc, #228]	; (80066b8 <__ieee754_pow+0xa20>)
 80065d2:	f7f9 fdc1 	bl	8000158 <__aeabi_dsub>
 80065d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80065da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80065de:	da29      	bge.n	8006634 <__ieee754_pow+0x99c>
 80065e0:	4652      	mov	r2, sl
 80065e2:	f000 f955 	bl	8006890 <scalbn>
 80065e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ea:	f7ff bbfe 	b.w	8005dea <__ieee754_pow+0x152>
 80065ee:	4b33      	ldr	r3, [pc, #204]	; (80066bc <__ieee754_pow+0xa24>)
 80065f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80065f4:	429f      	cmp	r7, r3
 80065f6:	f77f af13 	ble.w	8006420 <__ieee754_pow+0x788>
 80065fa:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <__ieee754_pow+0xa28>)
 80065fc:	440b      	add	r3, r1
 80065fe:	4303      	orrs	r3, r0
 8006600:	d009      	beq.n	8006616 <__ieee754_pow+0x97e>
 8006602:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006606:	2200      	movs	r2, #0
 8006608:	2300      	movs	r3, #0
 800660a:	f7fa f9cf 	bl	80009ac <__aeabi_dcmplt>
 800660e:	3800      	subs	r0, #0
 8006610:	bf18      	it	ne
 8006612:	2001      	movne	r0, #1
 8006614:	e453      	b.n	8005ebe <__ieee754_pow+0x226>
 8006616:	4622      	mov	r2, r4
 8006618:	462b      	mov	r3, r5
 800661a:	f7f9 fd9d 	bl	8000158 <__aeabi_dsub>
 800661e:	4642      	mov	r2, r8
 8006620:	464b      	mov	r3, r9
 8006622:	f7fa f9d7 	bl	80009d4 <__aeabi_dcmpge>
 8006626:	2800      	cmp	r0, #0
 8006628:	f43f aefa 	beq.w	8006420 <__ieee754_pow+0x788>
 800662c:	e7e9      	b.n	8006602 <__ieee754_pow+0x96a>
 800662e:	f04f 0a00 	mov.w	sl, #0
 8006632:	e720      	b.n	8006476 <__ieee754_pow+0x7de>
 8006634:	4621      	mov	r1, r4
 8006636:	e7d6      	b.n	80065e6 <__ieee754_pow+0x94e>
 8006638:	f04f 0b00 	mov.w	fp, #0
 800663c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80066b8 <__ieee754_pow+0xa20>
 8006640:	f7ff bbba 	b.w	8005db8 <__ieee754_pow+0x120>
 8006644:	f04f 0b00 	mov.w	fp, #0
 8006648:	f04f 0c00 	mov.w	ip, #0
 800664c:	f7ff bbb4 	b.w	8005db8 <__ieee754_pow+0x120>
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	f7ff bb3d 	b.w	8005cd2 <__ieee754_pow+0x3a>
 8006658:	9200      	str	r2, [sp, #0]
 800665a:	f7ff bb89 	b.w	8005d70 <__ieee754_pow+0xd8>
 800665e:	2300      	movs	r3, #0
 8006660:	f7ff bb73 	b.w	8005d4a <__ieee754_pow+0xb2>
 8006664:	f3af 8000 	nop.w
 8006668:	652b82fe 	.word	0x652b82fe
 800666c:	3c971547 	.word	0x3c971547
 8006670:	00000000 	.word	0x00000000
 8006674:	3fe62e43 	.word	0x3fe62e43
 8006678:	fefa39ef 	.word	0xfefa39ef
 800667c:	3fe62e42 	.word	0x3fe62e42
 8006680:	0ca86c39 	.word	0x0ca86c39
 8006684:	be205c61 	.word	0xbe205c61
 8006688:	72bea4d0 	.word	0x72bea4d0
 800668c:	3e663769 	.word	0x3e663769
 8006690:	c5d26bf1 	.word	0xc5d26bf1
 8006694:	3ebbbd41 	.word	0x3ebbbd41
 8006698:	af25de2c 	.word	0xaf25de2c
 800669c:	3f11566a 	.word	0x3f11566a
 80066a0:	16bebd93 	.word	0x16bebd93
 80066a4:	3f66c16c 	.word	0x3f66c16c
 80066a8:	5555553e 	.word	0x5555553e
 80066ac:	3fc55555 	.word	0x3fc55555
 80066b0:	3fe00000 	.word	0x3fe00000
 80066b4:	000fffff 	.word	0x000fffff
 80066b8:	3ff00000 	.word	0x3ff00000
 80066bc:	4090cbff 	.word	0x4090cbff
 80066c0:	3f6f3400 	.word	0x3f6f3400

080066c4 <__ieee754_sqrt>:
 80066c4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006820 <__ieee754_sqrt+0x15c>
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80066d0:	4606      	mov	r6, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	460c      	mov	r4, r1
 80066d6:	460a      	mov	r2, r1
 80066d8:	4607      	mov	r7, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	d10f      	bne.n	80066fe <__ieee754_sqrt+0x3a>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	f7f9 fef1 	bl	80004c8 <__aeabi_dmul>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4630      	mov	r0, r6
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7f9 fd35 	bl	800015c <__adddf3>
 80066f2:	4606      	mov	r6, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	4630      	mov	r0, r6
 80066f8:	4629      	mov	r1, r5
 80066fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fe:	2900      	cmp	r1, #0
 8006700:	dc0e      	bgt.n	8006720 <__ieee754_sqrt+0x5c>
 8006702:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006706:	ea5c 0707 	orrs.w	r7, ip, r7
 800670a:	d0f4      	beq.n	80066f6 <__ieee754_sqrt+0x32>
 800670c:	b141      	cbz	r1, 8006720 <__ieee754_sqrt+0x5c>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	f7f9 fd21 	bl	8000158 <__aeabi_dsub>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	f7f9 ffff 	bl	800071c <__aeabi_ddiv>
 800671e:	e7e8      	b.n	80066f2 <__ieee754_sqrt+0x2e>
 8006720:	1521      	asrs	r1, r4, #20
 8006722:	d075      	beq.n	8006810 <__ieee754_sqrt+0x14c>
 8006724:	07cc      	lsls	r4, r1, #31
 8006726:	f04f 0400 	mov.w	r4, #0
 800672a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800672e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006732:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006736:	bf5e      	ittt	pl
 8006738:	0fd9      	lsrpl	r1, r3, #31
 800673a:	005b      	lslpl	r3, r3, #1
 800673c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006740:	0fd9      	lsrs	r1, r3, #31
 8006742:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006746:	2516      	movs	r5, #22
 8006748:	4620      	mov	r0, r4
 800674a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674e:	107f      	asrs	r7, r7, #1
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	1846      	adds	r6, r0, r1
 8006754:	4296      	cmp	r6, r2
 8006756:	bfde      	ittt	le
 8006758:	1b92      	suble	r2, r2, r6
 800675a:	1870      	addle	r0, r6, r1
 800675c:	1864      	addle	r4, r4, r1
 800675e:	0052      	lsls	r2, r2, #1
 8006760:	3d01      	subs	r5, #1
 8006762:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006766:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800676a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800676e:	d1f0      	bne.n	8006752 <__ieee754_sqrt+0x8e>
 8006770:	4629      	mov	r1, r5
 8006772:	f04f 0e20 	mov.w	lr, #32
 8006776:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800677a:	4282      	cmp	r2, r0
 800677c:	eb06 0c05 	add.w	ip, r6, r5
 8006780:	dc02      	bgt.n	8006788 <__ieee754_sqrt+0xc4>
 8006782:	d113      	bne.n	80067ac <__ieee754_sqrt+0xe8>
 8006784:	459c      	cmp	ip, r3
 8006786:	d811      	bhi.n	80067ac <__ieee754_sqrt+0xe8>
 8006788:	f1bc 0f00 	cmp.w	ip, #0
 800678c:	eb0c 0506 	add.w	r5, ip, r6
 8006790:	da43      	bge.n	800681a <__ieee754_sqrt+0x156>
 8006792:	2d00      	cmp	r5, #0
 8006794:	db41      	blt.n	800681a <__ieee754_sqrt+0x156>
 8006796:	f100 0801 	add.w	r8, r0, #1
 800679a:	1a12      	subs	r2, r2, r0
 800679c:	4640      	mov	r0, r8
 800679e:	459c      	cmp	ip, r3
 80067a0:	bf88      	it	hi
 80067a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80067a6:	eba3 030c 	sub.w	r3, r3, ip
 80067aa:	4431      	add	r1, r6
 80067ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80067b0:	f1be 0e01 	subs.w	lr, lr, #1
 80067b4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80067b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067c0:	d1db      	bne.n	800677a <__ieee754_sqrt+0xb6>
 80067c2:	4313      	orrs	r3, r2
 80067c4:	d006      	beq.n	80067d4 <__ieee754_sqrt+0x110>
 80067c6:	1c48      	adds	r0, r1, #1
 80067c8:	bf0b      	itete	eq
 80067ca:	4671      	moveq	r1, lr
 80067cc:	3101      	addne	r1, #1
 80067ce:	3401      	addeq	r4, #1
 80067d0:	f021 0101 	bicne.w	r1, r1, #1
 80067d4:	1063      	asrs	r3, r4, #1
 80067d6:	0849      	lsrs	r1, r1, #1
 80067d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80067dc:	07e2      	lsls	r2, r4, #31
 80067de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80067e2:	bf48      	it	mi
 80067e4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80067e8:	460e      	mov	r6, r1
 80067ea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80067ee:	e782      	b.n	80066f6 <__ieee754_sqrt+0x32>
 80067f0:	0ada      	lsrs	r2, r3, #11
 80067f2:	3815      	subs	r0, #21
 80067f4:	055b      	lsls	r3, r3, #21
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d0fa      	beq.n	80067f0 <__ieee754_sqrt+0x12c>
 80067fa:	02d5      	lsls	r5, r2, #11
 80067fc:	d50a      	bpl.n	8006814 <__ieee754_sqrt+0x150>
 80067fe:	f1c1 0420 	rsb	r4, r1, #32
 8006802:	fa23 f404 	lsr.w	r4, r3, r4
 8006806:	1e4d      	subs	r5, r1, #1
 8006808:	408b      	lsls	r3, r1
 800680a:	4322      	orrs	r2, r4
 800680c:	1b41      	subs	r1, r0, r5
 800680e:	e789      	b.n	8006724 <__ieee754_sqrt+0x60>
 8006810:	4608      	mov	r0, r1
 8006812:	e7f0      	b.n	80067f6 <__ieee754_sqrt+0x132>
 8006814:	0052      	lsls	r2, r2, #1
 8006816:	3101      	adds	r1, #1
 8006818:	e7ef      	b.n	80067fa <__ieee754_sqrt+0x136>
 800681a:	4680      	mov	r8, r0
 800681c:	e7bd      	b.n	800679a <__ieee754_sqrt+0xd6>
 800681e:	bf00      	nop
 8006820:	7ff00000 	.word	0x7ff00000

08006824 <with_errno>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4604      	mov	r4, r0
 8006828:	460d      	mov	r5, r1
 800682a:	4616      	mov	r6, r2
 800682c:	f7ff f99a 	bl	8005b64 <__errno>
 8006830:	4629      	mov	r1, r5
 8006832:	6006      	str	r6, [r0, #0]
 8006834:	4620      	mov	r0, r4
 8006836:	bd70      	pop	{r4, r5, r6, pc}

08006838 <xflow>:
 8006838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800683a:	4615      	mov	r5, r2
 800683c:	461c      	mov	r4, r3
 800683e:	b180      	cbz	r0, 8006862 <xflow+0x2a>
 8006840:	4610      	mov	r0, r2
 8006842:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006846:	e9cd 0100 	strd	r0, r1, [sp]
 800684a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800684e:	4628      	mov	r0, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f7f9 fe39 	bl	80004c8 <__aeabi_dmul>
 8006856:	2222      	movs	r2, #34	; 0x22
 8006858:	b003      	add	sp, #12
 800685a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800685e:	f7ff bfe1 	b.w	8006824 <with_errno>
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	e7ee      	b.n	8006846 <xflow+0xe>

08006868 <__math_uflow>:
 8006868:	2200      	movs	r2, #0
 800686a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800686e:	f7ff bfe3 	b.w	8006838 <xflow>

08006872 <__math_oflow>:
 8006872:	2200      	movs	r2, #0
 8006874:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006878:	f7ff bfde 	b.w	8006838 <xflow>

0800687c <fabs>:
 800687c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006880:	4770      	bx	lr

08006882 <finite>:
 8006882:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006886:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800688a:	0fc0      	lsrs	r0, r0, #31
 800688c:	4770      	bx	lr
	...

08006890 <scalbn>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006896:	4604      	mov	r4, r0
 8006898:	460d      	mov	r5, r1
 800689a:	4617      	mov	r7, r2
 800689c:	460b      	mov	r3, r1
 800689e:	b996      	cbnz	r6, 80068c6 <scalbn+0x36>
 80068a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068a4:	4303      	orrs	r3, r0
 80068a6:	d039      	beq.n	800691c <scalbn+0x8c>
 80068a8:	4b33      	ldr	r3, [pc, #204]	; (8006978 <scalbn+0xe8>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	f7f9 fe0c 	bl	80004c8 <__aeabi_dmul>
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <scalbn+0xec>)
 80068b2:	4604      	mov	r4, r0
 80068b4:	429f      	cmp	r7, r3
 80068b6:	460d      	mov	r5, r1
 80068b8:	da0f      	bge.n	80068da <scalbn+0x4a>
 80068ba:	a32b      	add	r3, pc, #172	; (adr r3, 8006968 <scalbn+0xd8>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fe02 	bl	80004c8 <__aeabi_dmul>
 80068c4:	e006      	b.n	80068d4 <scalbn+0x44>
 80068c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80068ca:	4296      	cmp	r6, r2
 80068cc:	d10a      	bne.n	80068e4 <scalbn+0x54>
 80068ce:	4602      	mov	r2, r0
 80068d0:	f7f9 fc44 	bl	800015c <__adddf3>
 80068d4:	4604      	mov	r4, r0
 80068d6:	460d      	mov	r5, r1
 80068d8:	e020      	b.n	800691c <scalbn+0x8c>
 80068da:	460b      	mov	r3, r1
 80068dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80068e0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80068e4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80068e8:	19b9      	adds	r1, r7, r6
 80068ea:	4291      	cmp	r1, r2
 80068ec:	dd0e      	ble.n	800690c <scalbn+0x7c>
 80068ee:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80068f2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80068f6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80068fa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80068fe:	4820      	ldr	r0, [pc, #128]	; (8006980 <scalbn+0xf0>)
 8006900:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006904:	a31a      	add	r3, pc, #104	; (adr r3, 8006970 <scalbn+0xe0>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	e7d9      	b.n	80068c0 <scalbn+0x30>
 800690c:	2900      	cmp	r1, #0
 800690e:	dd08      	ble.n	8006922 <scalbn+0x92>
 8006910:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006918:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006922:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006926:	da12      	bge.n	800694e <scalbn+0xbe>
 8006928:	f24c 3350 	movw	r3, #50000	; 0xc350
 800692c:	429f      	cmp	r7, r3
 800692e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006932:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006936:	dcdc      	bgt.n	80068f2 <scalbn+0x62>
 8006938:	a30b      	add	r3, pc, #44	; (adr r3, 8006968 <scalbn+0xd8>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006942:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006946:	480f      	ldr	r0, [pc, #60]	; (8006984 <scalbn+0xf4>)
 8006948:	f041 011f 	orr.w	r1, r1, #31
 800694c:	e7b8      	b.n	80068c0 <scalbn+0x30>
 800694e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006952:	3136      	adds	r1, #54	; 0x36
 8006954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006958:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800695c:	4620      	mov	r0, r4
 800695e:	4629      	mov	r1, r5
 8006960:	2200      	movs	r2, #0
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <scalbn+0xf8>)
 8006964:	e7ac      	b.n	80068c0 <scalbn+0x30>
 8006966:	bf00      	nop
 8006968:	c2f8f359 	.word	0xc2f8f359
 800696c:	01a56e1f 	.word	0x01a56e1f
 8006970:	8800759c 	.word	0x8800759c
 8006974:	7e37e43c 	.word	0x7e37e43c
 8006978:	43500000 	.word	0x43500000
 800697c:	ffff3cb0 	.word	0xffff3cb0
 8006980:	8800759c 	.word	0x8800759c
 8006984:	c2f8f359 	.word	0xc2f8f359
 8006988:	3c900000 	.word	0x3c900000

0800698c <_init>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr

08006998 <_fini>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr
